
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000575c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005a38  08005a38  00015a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000508  24000010  08005a4c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000518  08005a4c  00020518  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023388  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000340a  00000000  00000000  000433c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012c8  00000000  00000000  000467d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000011e0  00000000  00000000  00047a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003741f  00000000  00000000  00048c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017c1f  00000000  00000000  00080097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00163dd3  00000000  00000000  00097cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fba89  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000050f0  00000000  00000000  001fbadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080059dc 	.word	0x080059dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080059dc 	.word	0x080059dc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fc80 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f812 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f95e 	bl	800089c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e0:	f000 f8de 	bl	80007a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e4:	f000 f928 	bl	8000838 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM5_Init();
 80005e8:	f000 f884 	bl	80006f4 <MX_TIM5_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  a = htim5.Instance->CNT;
 80005ec:	4b02      	ldr	r3, [pc, #8]	; (80005f8 <main+0x28>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f2:	4a02      	ldr	r2, [pc, #8]	; (80005fc <main+0x2c>)
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	e7f9      	b.n	80005ec <main+0x1c>
 80005f8:	240004c8 	.word	0x240004c8
 80005fc:	2400002c 	.word	0x2400002c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b09c      	sub	sp, #112	; 0x70
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060a:	224c      	movs	r2, #76	; 0x4c
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 f9dc 	bl	80059cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2220      	movs	r2, #32
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 f9d6 	bl	80059cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000620:	2002      	movs	r0, #2
 8000622:	f001 f911 	bl	8001848 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	4b30      	ldr	r3, [pc, #192]	; (80006ec <SystemClock_Config+0xec>)
 800062c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062e:	4a2f      	ldr	r2, [pc, #188]	; (80006ec <SystemClock_Config+0xec>)
 8000630:	f023 0301 	bic.w	r3, r3, #1
 8000634:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000636:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <SystemClock_Config+0xec>)
 8000638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemClock_Config+0xf0>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <SystemClock_Config+0xf0>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0xf0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000658:	bf00      	nop
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <SystemClock_Config+0xf0>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000666:	d1f8      	bne.n	800065a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800067e:	2318      	movs	r3, #24
 8000680:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800068e:	230c      	movs	r3, #12
 8000690:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000692:	2300      	movs	r3, #0
 8000694:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f91c 	bl	80018dc <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 f9ef 	bl	8000a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	233f      	movs	r3, #63	; 0x3f
 80006b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2101      	movs	r1, #1
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fd2e 	bl	8002134 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006de:	f000 f9d5 	bl	8000a8c <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3770      	adds	r7, #112	; 0x70
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	58000400 	.word	0x58000400
 80006f0:	58024800 	.word	0x58024800

080006f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2224      	movs	r2, #36	; 0x24
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f005 f962 	bl	80059cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_TIM5_Init+0xa4>)
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <MX_TIM5_Init+0xa8>)
 8000716:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_TIM5_Init+0xa4>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_TIM5_Init+0xa4>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_TIM5_Init+0xa4>)
 8000726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800072a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_TIM5_Init+0xa4>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_TIM5_Init+0xa4>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000738:	2303      	movs	r3, #3
 800073a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000740:	2301      	movs	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000750:	2301      	movs	r3, #1
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_TIM5_Init+0xa4>)
 8000764:	f003 fbd4 	bl	8003f10 <HAL_TIM_Encoder_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800076e:	f000 f98d 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_TIM5_Init+0xa4>)
 8000780:	f003 fd06 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800078a:	f000 f97f 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3730      	adds	r7, #48	; 0x30
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	240004c8 	.word	0x240004c8
 800079c:	40000c00 	.word	0x40000c00

080007a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007a6:	4a23      	ldr	r2, [pc, #140]	; (8000834 <MX_USART3_UART_Init+0x94>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e8:	4811      	ldr	r0, [pc, #68]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007ea:	f003 fd5f 	bl	80042ac <HAL_UART_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 f94a 	bl	8000a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_USART3_UART_Init+0x90>)
 80007fc:	f004 fcf4 	bl	80051e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000806:	f000 f941 	bl	8000a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <MX_USART3_UART_Init+0x90>)
 800080e:	f004 fd29 	bl	8005264 <HAL_UARTEx_SetRxFifoThreshold>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000818:	f000 f938 	bl	8000a8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_USART3_UART_Init+0x90>)
 800081e:	f004 fcaa 	bl	8005176 <HAL_UARTEx_DisableFifoMode>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000828:	f000 f930 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	24000030 	.word	0x24000030
 8000834:	40004800 	.word	0x40004800

08000838 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000840:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000844:	2209      	movs	r2, #9
 8000846:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084a:	2202      	movs	r2, #2
 800084c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000856:	2202      	movs	r2, #2
 8000858:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085c:	2201      	movs	r2, #1
 800085e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086e:	2201      	movs	r2, #1
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000874:	2201      	movs	r2, #1
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087a:	2200      	movs	r2, #0
 800087c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000880:	f000 fe99 	bl	80015b6 <HAL_PCD_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800088a:	f000 f8ff 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	240000c0 	.word	0x240000c0
 8000898:	40080000 	.word	0x40080000

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b71      	ldr	r3, [pc, #452]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	4a6f      	ldr	r2, [pc, #444]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008ba:	f043 0304 	orr.w	r3, r3, #4
 80008be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c2:	4b6d      	ldr	r3, [pc, #436]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d0:	4b69      	ldr	r3, [pc, #420]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	4a68      	ldr	r2, [pc, #416]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e0:	4b65      	ldr	r3, [pc, #404]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b62      	ldr	r3, [pc, #392]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	4a60      	ldr	r2, [pc, #384]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fe:	4b5e      	ldr	r3, [pc, #376]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090c:	4b5a      	ldr	r3, [pc, #360]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000912:	4a59      	ldr	r2, [pc, #356]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091c:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	4a51      	ldr	r2, [pc, #324]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093a:	4b4f      	ldr	r3, [pc, #316]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	f003 0308 	and.w	r3, r3, #8
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000948:	4b4b      	ldr	r3, [pc, #300]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	4a4a      	ldr	r2, [pc, #296]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000958:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <MX_GPIO_Init+0x1dc>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800096c:	4843      	ldr	r0, [pc, #268]	; (8000a7c <MX_GPIO_Init+0x1e0>)
 800096e:	f000 fe09 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2140      	movs	r1, #64	; 0x40
 8000976:	4842      	ldr	r0, [pc, #264]	; (8000a80 <MX_GPIO_Init+0x1e4>)
 8000978:	f000 fe04 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000982:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	483c      	ldr	r0, [pc, #240]	; (8000a84 <MX_GPIO_Init+0x1e8>)
 8000994:	f000 fc46 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000998:	2332      	movs	r3, #50	; 0x32
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a8:	230b      	movs	r3, #11
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4834      	ldr	r0, [pc, #208]	; (8000a84 <MX_GPIO_Init+0x1e8>)
 80009b4:	f000 fc36 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009b8:	2384      	movs	r3, #132	; 0x84
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c8:	230b      	movs	r3, #11
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	482d      	ldr	r0, [pc, #180]	; (8000a88 <MX_GPIO_Init+0x1ec>)
 80009d4:	f000 fc26 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ea:	230b      	movs	r3, #11
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4821      	ldr	r0, [pc, #132]	; (8000a7c <MX_GPIO_Init+0x1e0>)
 80009f6:	f000 fc15 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009fa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481a      	ldr	r0, [pc, #104]	; (8000a7c <MX_GPIO_Init+0x1e0>)
 8000a14:	f000 fc06 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4814      	ldr	r0, [pc, #80]	; (8000a80 <MX_GPIO_Init+0x1e4>)
 8000a30:	f000 fbf8 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	480e      	ldr	r0, [pc, #56]	; (8000a80 <MX_GPIO_Init+0x1e4>)
 8000a48:	f000 fbec 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5e:	230b      	movs	r3, #11
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_GPIO_Init+0x1e4>)
 8000a6a:	f000 fbdb 	bl	8001224 <HAL_GPIO_Init>

}
 8000a6e:	bf00      	nop
 8000a70:	3730      	adds	r7, #48	; 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	58024400 	.word	0x58024400
 8000a7c:	58020400 	.word	0x58020400
 8000a80:	58021800 	.word	0x58021800
 8000a84:	58020800 	.word	0x58020800
 8000a88:	58020000 	.word	0x58020000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_MspInit+0x30>)
 8000aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa4:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x30>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x30>)
 8000ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	58024400 	.word	0x58024400

08000acc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <HAL_TIM_Encoder_MspInit+0x88>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12d      	bne.n	8000b4a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000af4:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b04:	f003 0308 	and.w	r3, r3, #8
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b12:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <HAL_TIM_Encoder_MspInit+0x90>)
 8000b46:	f000 fb6d 	bl	8001224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40000c00 	.word	0x40000c00
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020000 	.word	0x58020000

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0b8      	sub	sp, #224	; 0xe0
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	22bc      	movs	r2, #188	; 0xbc
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 ff23 	bl	80059cc <memset>
  if(huart->Instance==USART3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <HAL_UART_MspInit+0xc0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d142      	bne.n	8000c16 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fe54 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000baa:	f7ff ff6f 	bl	8000a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_UART_MspInit+0xc4>)
 8000bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <HAL_UART_MspInit+0xc4>)
 8000bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <HAL_UART_MspInit+0xc4>)
 8000bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_UART_MspInit+0xc4>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <HAL_UART_MspInit+0xc4>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_UART_MspInit+0xc4>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c04:	2307      	movs	r3, #7
 8000c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_UART_MspInit+0xc8>)
 8000c12:	f000 fb07 	bl	8001224 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	37e0      	adds	r7, #224	; 0xe0
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40004800 	.word	0x40004800
 8000c24:	58024400 	.word	0x58024400
 8000c28:	58020c00 	.word	0x58020c00

08000c2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0b8      	sub	sp, #224	; 0xe0
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	22bc      	movs	r2, #188	; 0xbc
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 febd 	bl	80059cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a2f      	ldr	r2, [pc, #188]	; (8000d14 <HAL_PCD_MspInit+0xe8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d156      	bne.n	8000d0a <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fdec 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000c7a:	f7ff ff07 	bl	8000a8c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000c7e:	f000 fe1d 	bl	80018bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ca0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000cba:	230a      	movs	r3, #10
 8000cbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4815      	ldr	r0, [pc, #84]	; (8000d1c <HAL_PCD_MspInit+0xf0>)
 8000cc8:	f000 faac 	bl	8001224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <HAL_PCD_MspInit+0xf0>)
 8000ce8:	f000 fa9c 	bl	8001224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf2:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000cf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cf8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	37e0      	adds	r7, #224	; 0xe0
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40080000 	.word	0x40080000
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020000 	.word	0x58020000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f926 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <SystemInit+0xe4>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <SystemInit+0xe4>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d88:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <SystemInit+0xe8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 030f 	and.w	r3, r3, #15
 8000d90:	2b06      	cmp	r3, #6
 8000d92:	d807      	bhi.n	8000da4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d94:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <SystemInit+0xe8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 030f 	bic.w	r3, r3, #15
 8000d9c:	4a2f      	ldr	r2, [pc, #188]	; (8000e5c <SystemInit+0xe8>)
 8000d9e:	f043 0307 	orr.w	r3, r3, #7
 8000da2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <SystemInit+0xec>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <SystemInit+0xec>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <SystemInit+0xec>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <SystemInit+0xec>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4929      	ldr	r1, [pc, #164]	; (8000e60 <SystemInit+0xec>)
 8000dbc:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <SystemInit+0xf0>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <SystemInit+0xe8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <SystemInit+0xe8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f023 030f 	bic.w	r3, r3, #15
 8000dd6:	4a21      	ldr	r2, [pc, #132]	; (8000e5c <SystemInit+0xe8>)
 8000dd8:	f043 0307 	orr.w	r3, r3, #7
 8000ddc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <SystemInit+0xec>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <SystemInit+0xec>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <SystemInit+0xec>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <SystemInit+0xec>)
 8000df2:	4a1d      	ldr	r2, [pc, #116]	; (8000e68 <SystemInit+0xf4>)
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <SystemInit+0xec>)
 8000df8:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <SystemInit+0xf8>)
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <SystemInit+0xec>)
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <SystemInit+0xfc>)
 8000e00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <SystemInit+0xec>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <SystemInit+0xec>)
 8000e0a:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <SystemInit+0xfc>)
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <SystemInit+0xec>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <SystemInit+0xec>)
 8000e16:	4a16      	ldr	r2, [pc, #88]	; (8000e70 <SystemInit+0xfc>)
 8000e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <SystemInit+0xec>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <SystemInit+0xec>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <SystemInit+0xec>)
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <SystemInit+0xec>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <SystemInit+0x100>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <SystemInit+0x104>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e3e:	d202      	bcs.n	8000e46 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <SystemInit+0x108>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <SystemInit+0x10c>)
 8000e48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e4c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00
 8000e5c:	52002000 	.word	0x52002000
 8000e60:	58024400 	.word	0x58024400
 8000e64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e68:	02020200 	.word	0x02020200
 8000e6c:	01ff0000 	.word	0x01ff0000
 8000e70:	01010280 	.word	0x01010280
 8000e74:	5c001000 	.word	0x5c001000
 8000e78:	ffff0000 	.word	0xffff0000
 8000e7c:	51008108 	.word	0x51008108
 8000e80:	52004000 	.word	0x52004000

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e88:	f7ff ff74 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f004 fd67 	bl	8005984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fb8b 	bl	80005d0 <main>
  bx  lr
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ec0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ec4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ec8:	08005a3c 	.word	0x08005a3c
  ldr r2, =_sbss
 8000ecc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ed0:	24000518 	.word	0x24000518

08000ed4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC3_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ede:	2003      	movs	r0, #3
 8000ee0:	f000 f96e 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ee4:	f001 fadc 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_Init+0x68>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	f003 030f 	and.w	r3, r3, #15
 8000ef4:	4913      	ldr	r1, [pc, #76]	; (8000f44 <HAL_Init+0x6c>)
 8000ef6:	5ccb      	ldrb	r3, [r1, r3]
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
 8000f00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_Init+0x68>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_Init+0x6c>)
 8000f0c:	5cd3      	ldrb	r3, [r2, r3]
 8000f0e:	f003 031f 	and.w	r3, r3, #31
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_Init+0x70>)
 8000f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_Init+0x74>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f814 	bl	8000f50 <HAL_InitTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e002      	b.n	8000f38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f32:	f7ff fdb1 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	58024400 	.word	0x58024400
 8000f44:	080059f4 	.word	0x080059f4
 8000f48:	24000004 	.word	0x24000004
 8000f4c:	24000000 	.word	0x24000000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_InitTick+0x60>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e021      	b.n	8000fa8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_InitTick+0x64>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_InitTick+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f945 	bl	800120a <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f98:	f000 f91d 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x68>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2400000c 	.word	0x2400000c
 8000fb4:	24000000 	.word	0x24000000
 8000fb8:	24000008 	.word	0x24000008

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2400000c 	.word	0x2400000c
 8000fe0:	24000514 	.word	0x24000514

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	24000514 	.word	0x24000514

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2400000c 	.word	0x2400000c

08001044 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetREVID+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	0c1b      	lsrs	r3, r3, #16
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	5c001000 	.word	0x5c001000

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	4313      	orrs	r3, r2
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	05fa0000 	.word	0x05fa0000

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a0:	f7ff ff8e 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff47 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff5e 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff90 	bl	8001114 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5f 	bl	80010c0 <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffb2 	bl	800117c <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001232:	4b89      	ldr	r3, [pc, #548]	; (8001458 <HAL_GPIO_Init+0x234>)
 8001234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001236:	e194      	b.n	8001562 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8186 	beq.w	800155c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d005      	beq.n	8001268 <HAL_GPIO_Init+0x44>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d130      	bne.n	80012ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800129e:	2201      	movs	r2, #1
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 0201 	and.w	r2, r3, #1
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d017      	beq.n	8001306 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d123      	bne.n	800135a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	69b9      	ldr	r1, [r7, #24]
 8001356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0203 	and.w	r2, r3, #3
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80e0 	beq.w	800155c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139c:	4b2f      	ldr	r3, [pc, #188]	; (800145c <HAL_GPIO_Init+0x238>)
 800139e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a2:	4a2e      	ldr	r2, [pc, #184]	; (800145c <HAL_GPIO_Init+0x238>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_GPIO_Init+0x238>)
 80013ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ba:	4a29      	ldr	r2, [pc, #164]	; (8001460 <HAL_GPIO_Init+0x23c>)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a20      	ldr	r2, [pc, #128]	; (8001464 <HAL_GPIO_Init+0x240>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d052      	beq.n	800148c <HAL_GPIO_Init+0x268>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a1f      	ldr	r2, [pc, #124]	; (8001468 <HAL_GPIO_Init+0x244>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d031      	beq.n	8001452 <HAL_GPIO_Init+0x22e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a1e      	ldr	r2, [pc, #120]	; (800146c <HAL_GPIO_Init+0x248>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d02b      	beq.n	800144e <HAL_GPIO_Init+0x22a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <HAL_GPIO_Init+0x24c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d025      	beq.n	800144a <HAL_GPIO_Init+0x226>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <HAL_GPIO_Init+0x250>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d01f      	beq.n	8001446 <HAL_GPIO_Init+0x222>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <HAL_GPIO_Init+0x254>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0x21e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_GPIO_Init+0x258>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x21a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_GPIO_Init+0x25c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x216>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a18      	ldr	r2, [pc, #96]	; (8001484 <HAL_GPIO_Init+0x260>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x212>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a17      	ldr	r2, [pc, #92]	; (8001488 <HAL_GPIO_Init+0x264>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x20e>
 800142e:	2309      	movs	r3, #9
 8001430:	e02d      	b.n	800148e <HAL_GPIO_Init+0x26a>
 8001432:	230a      	movs	r3, #10
 8001434:	e02b      	b.n	800148e <HAL_GPIO_Init+0x26a>
 8001436:	2308      	movs	r3, #8
 8001438:	e029      	b.n	800148e <HAL_GPIO_Init+0x26a>
 800143a:	2307      	movs	r3, #7
 800143c:	e027      	b.n	800148e <HAL_GPIO_Init+0x26a>
 800143e:	2306      	movs	r3, #6
 8001440:	e025      	b.n	800148e <HAL_GPIO_Init+0x26a>
 8001442:	2305      	movs	r3, #5
 8001444:	e023      	b.n	800148e <HAL_GPIO_Init+0x26a>
 8001446:	2304      	movs	r3, #4
 8001448:	e021      	b.n	800148e <HAL_GPIO_Init+0x26a>
 800144a:	2303      	movs	r3, #3
 800144c:	e01f      	b.n	800148e <HAL_GPIO_Init+0x26a>
 800144e:	2302      	movs	r3, #2
 8001450:	e01d      	b.n	800148e <HAL_GPIO_Init+0x26a>
 8001452:	2301      	movs	r3, #1
 8001454:	e01b      	b.n	800148e <HAL_GPIO_Init+0x26a>
 8001456:	bf00      	nop
 8001458:	58000080 	.word	0x58000080
 800145c:	58024400 	.word	0x58024400
 8001460:	58000400 	.word	0x58000400
 8001464:	58020000 	.word	0x58020000
 8001468:	58020400 	.word	0x58020400
 800146c:	58020800 	.word	0x58020800
 8001470:	58020c00 	.word	0x58020c00
 8001474:	58021000 	.word	0x58021000
 8001478:	58021400 	.word	0x58021400
 800147c:	58021800 	.word	0x58021800
 8001480:	58021c00 	.word	0x58021c00
 8001484:	58022000 	.word	0x58022000
 8001488:	58022400 	.word	0x58022400
 800148c:	2300      	movs	r3, #0
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	f002 0203 	and.w	r2, r2, #3
 8001494:	0092      	lsls	r2, r2, #2
 8001496:	4093      	lsls	r3, r2
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149e:	4938      	ldr	r1, [pc, #224]	; (8001580 <HAL_GPIO_Init+0x35c>)
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	3301      	adds	r3, #1
 8001560:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	f47f ae63 	bne.w	8001238 <HAL_GPIO_Init+0x14>
  }
}
 8001572:	bf00      	nop
 8001574:	bf00      	nop
 8001576:	3724      	adds	r7, #36	; 0x24
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	58000400 	.word	0x58000400

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80015a0:	e003      	b.n	80015aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b8:	b08f      	sub	sp, #60	; 0x3c
 80015ba:	af0a      	add	r7, sp, #40	; 0x28
 80015bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e116      	b.n	80017f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fb22 	bl	8000c2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2203      	movs	r2, #3
 80015ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f003 ff26 	bl	8005458 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	687e      	ldr	r6, [r7, #4]
 8001614:	466d      	mov	r5, sp
 8001616:	f106 0410 	add.w	r4, r6, #16
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001626:	e885 0003 	stmia.w	r5, {r0, r1}
 800162a:	1d33      	adds	r3, r6, #4
 800162c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f003 fea4 	bl	800537c <USB_CoreInit>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d005      	beq.n	8001646 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2202      	movs	r2, #2
 800163e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0d7      	b.n	80017f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f003 ff14 	bl	800547a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e04a      	b.n	80016ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	333d      	adds	r3, #61	; 0x3d
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	333c      	adds	r3, #60	; 0x3c
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	b298      	uxth	r0, r3
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3342      	adds	r3, #66	; 0x42
 8001694:	4602      	mov	r2, r0
 8001696:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	333f      	adds	r3, #63	; 0x3f
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	3344      	adds	r3, #68	; 0x44
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	3348      	adds	r3, #72	; 0x48
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	3350      	adds	r3, #80	; 0x50
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	3301      	adds	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3af      	bcc.n	8001658 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e044      	b.n	8001788 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	1a9b      	subs	r3, r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	3301      	adds	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3b5      	bcc.n	80016fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	687e      	ldr	r6, [r7, #4]
 800179a:	466d      	mov	r5, sp
 800179c:	f106 0410 	add.w	r4, r6, #16
 80017a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80017b0:	1d33      	adds	r3, r6, #4
 80017b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b4:	6838      	ldr	r0, [r7, #0]
 80017b6:	f003 fead 	bl	8005514 <USB_DevInit>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e014      	b.n	80017f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d102      	bne.n	80017ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f80b 	bl	8001800 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f004 f867 	bl	80058c2 <USB_DevDisconnect>

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001800 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_PCDEx_ActivateLPM+0x44>)
 8001830:	4313      	orrs	r3, r2
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	10000003 	.word	0x10000003

08001848 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_PWREx_ConfigSupply+0x70>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b04      	cmp	r3, #4
 800185a:	d00a      	beq.n	8001872 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <HAL_PWREx_ConfigSupply+0x70>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	d001      	beq.n	800186e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e01f      	b.n	80018ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e01d      	b.n	80018ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_PWREx_ConfigSupply+0x70>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f023 0207 	bic.w	r2, r3, #7
 800187a:	490f      	ldr	r1, [pc, #60]	; (80018b8 <HAL_PWREx_ConfigSupply+0x70>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4313      	orrs	r3, r2
 8001880:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001882:	f7ff fbaf 	bl	8000fe4 <HAL_GetTick>
 8001886:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001888:	e009      	b.n	800189e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800188a:	f7ff fbab 	bl	8000fe4 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001898:	d901      	bls.n	800189e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e007      	b.n	80018ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_PWREx_ConfigSupply+0x70>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018aa:	d1ee      	bne.n	800188a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	58024800 	.word	0x58024800

080018bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	58024800 	.word	0x58024800

080018dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f000 bc1c 	b.w	8002128 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8087 	beq.w	8001a0c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fe:	4b9e      	ldr	r3, [pc, #632]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001908:	4b9b      	ldr	r3, [pc, #620]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	2b10      	cmp	r3, #16
 8001912:	d007      	beq.n	8001924 <HAL_RCC_OscConfig+0x48>
 8001914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001916:	2b18      	cmp	r3, #24
 8001918:	d110      	bne.n	800193c <HAL_RCC_OscConfig+0x60>
 800191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d10b      	bne.n	800193c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	4b94      	ldr	r3, [pc, #592]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d06c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x12e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d168      	bne.n	8001a0a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e3f5      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d106      	bne.n	8001954 <HAL_RCC_OscConfig+0x78>
 8001946:	4b8c      	ldr	r3, [pc, #560]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a8b      	ldr	r2, [pc, #556]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e02e      	b.n	80019b2 <HAL_RCC_OscConfig+0xd6>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10c      	bne.n	8001976 <HAL_RCC_OscConfig+0x9a>
 800195c:	4b86      	ldr	r3, [pc, #536]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a85      	ldr	r2, [pc, #532]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b83      	ldr	r3, [pc, #524]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a82      	ldr	r2, [pc, #520]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	e01d      	b.n	80019b2 <HAL_RCC_OscConfig+0xd6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0xbe>
 8001980:	4b7d      	ldr	r3, [pc, #500]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a7c      	ldr	r2, [pc, #496]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001986:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a79      	ldr	r2, [pc, #484]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0xd6>
 800199a:	4b77      	ldr	r3, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a76      	ldr	r2, [pc, #472]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 80019a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a73      	ldr	r2, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 80019ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d013      	beq.n	80019e2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f7ff fb13 	bl	8000fe4 <HAL_GetTick>
 80019be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c2:	f7ff fb0f 	bl	8000fe4 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b64      	cmp	r3, #100	; 0x64
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e3a9      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019d4:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0xe6>
 80019e0:	e014      	b.n	8001a0c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff faff 	bl	8000fe4 <HAL_GetTick>
 80019e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ea:	f7ff fafb 	bl	8000fe4 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b64      	cmp	r3, #100	; 0x64
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e395      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019fc:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x10e>
 8001a08:	e000      	b.n	8001a0c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80ca 	beq.w	8001bae <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a1a:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a22:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a24:	4b54      	ldr	r3, [pc, #336]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d007      	beq.n	8001a40 <HAL_RCC_OscConfig+0x164>
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	2b18      	cmp	r3, #24
 8001a34:	d156      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x208>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d151      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a40:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x17c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e367      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 0219 	bic.w	r2, r3, #25
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4944      	ldr	r1, [pc, #272]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a6a:	f7ff fabb 	bl	8000fe4 <HAL_GetTick>
 8001a6e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a72:	f7ff fab7 	bl	8000fe4 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e351      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a84:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a90:	f7ff fad8 	bl	8001044 <HAL_GetREVID>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d817      	bhi.n	8001ace <HAL_RCC_OscConfig+0x1f2>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d108      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x1dc>
 8001aa6:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001aae:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab6:	e07a      	b.n	8001bae <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	031b      	lsls	r3, r3, #12
 8001ac6:	492c      	ldr	r1, [pc, #176]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001acc:	e06f      	b.n	8001bae <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	061b      	lsls	r3, r3, #24
 8001adc:	4926      	ldr	r1, [pc, #152]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae2:	e064      	b.n	8001bae <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d047      	beq.n	8001b7c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 0219 	bic.w	r2, r3, #25
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	491f      	ldr	r1, [pc, #124]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff fa71 	bl	8000fe4 <HAL_GetTick>
 8001b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fa6d 	bl	8000fe4 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e307      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	f7ff fa8e 	bl	8001044 <HAL_GetREVID>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d817      	bhi.n	8001b62 <HAL_RCC_OscConfig+0x286>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b40      	cmp	r3, #64	; 0x40
 8001b38:	d108      	bne.n	8001b4c <HAL_RCC_OscConfig+0x270>
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b42:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	6053      	str	r3, [r2, #4]
 8001b4a:	e030      	b.n	8001bae <HAL_RCC_OscConfig+0x2d2>
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	031b      	lsls	r3, r3, #12
 8001b5a:	4907      	ldr	r1, [pc, #28]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
 8001b60:	e025      	b.n	8001bae <HAL_RCC_OscConfig+0x2d2>
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	061b      	lsls	r3, r3, #24
 8001b70:	4901      	ldr	r1, [pc, #4]	; (8001b78 <HAL_RCC_OscConfig+0x29c>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
 8001b76:	e01a      	b.n	8001bae <HAL_RCC_OscConfig+0x2d2>
 8001b78:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7c:	4b9e      	ldr	r3, [pc, #632]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a9d      	ldr	r2, [pc, #628]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff fa2c 	bl	8000fe4 <HAL_GetTick>
 8001b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b90:	f7ff fa28 	bl	8000fe4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e2c2      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ba2:	4b95      	ldr	r3, [pc, #596]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80a9 	beq.w	8001d0e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bbc:	4b8e      	ldr	r3, [pc, #568]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bc4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bc6:	4b8c      	ldr	r3, [pc, #560]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d007      	beq.n	8001be2 <HAL_RCC_OscConfig+0x306>
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b18      	cmp	r3, #24
 8001bd6:	d13a      	bne.n	8001c4e <HAL_RCC_OscConfig+0x372>
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d135      	bne.n	8001c4e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x31e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	2b80      	cmp	r3, #128	; 0x80
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e296      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bfa:	f7ff fa23 	bl	8001044 <HAL_GetREVID>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d817      	bhi.n	8001c38 <HAL_RCC_OscConfig+0x35c>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	d108      	bne.n	8001c22 <HAL_RCC_OscConfig+0x346>
 8001c10:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c18:	4a77      	ldr	r2, [pc, #476]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c1e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c20:	e075      	b.n	8001d0e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c22:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	069b      	lsls	r3, r3, #26
 8001c30:	4971      	ldr	r1, [pc, #452]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c36:	e06a      	b.n	8001d0e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c38:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	061b      	lsls	r3, r3, #24
 8001c46:	496c      	ldr	r1, [pc, #432]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c4c:	e05f      	b.n	8001d0e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d042      	beq.n	8001cdc <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c56:	4b68      	ldr	r3, [pc, #416]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a67      	ldr	r2, [pc, #412]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f9bf 	bl	8000fe4 <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c6a:	f7ff f9bb 	bl	8000fe4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e255      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c7c:	4b5e      	ldr	r3, [pc, #376]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c88:	f7ff f9dc 	bl	8001044 <HAL_GetREVID>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d817      	bhi.n	8001cc6 <HAL_RCC_OscConfig+0x3ea>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	2b20      	cmp	r3, #32
 8001c9c:	d108      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x3d4>
 8001c9e:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ca6:	4a54      	ldr	r2, [pc, #336]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cac:	6053      	str	r3, [r2, #4]
 8001cae:	e02e      	b.n	8001d0e <HAL_RCC_OscConfig+0x432>
 8001cb0:	4b51      	ldr	r3, [pc, #324]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	069b      	lsls	r3, r3, #26
 8001cbe:	494e      	ldr	r1, [pc, #312]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
 8001cc4:	e023      	b.n	8001d0e <HAL_RCC_OscConfig+0x432>
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	061b      	lsls	r3, r3, #24
 8001cd4:	4948      	ldr	r1, [pc, #288]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60cb      	str	r3, [r1, #12]
 8001cda:	e018      	b.n	8001d0e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001cdc:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a45      	ldr	r2, [pc, #276]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f97c 	bl	8000fe4 <HAL_GetTick>
 8001cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001cf0:	f7ff f978 	bl	8000fe4 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e212      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d036      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d019      	beq.n	8001d56 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d22:	4b35      	ldr	r3, [pc, #212]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d26:	4a34      	ldr	r2, [pc, #208]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7ff f959 	bl	8000fe4 <HAL_GetTick>
 8001d32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d36:	f7ff f955 	bl	8000fe4 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e1ef      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x45a>
 8001d54:	e018      	b.n	8001d88 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5a:	4a27      	ldr	r2, [pc, #156]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff f93f 	bl	8000fe4 <HAL_GetTick>
 8001d66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff f93b 	bl	8000fe4 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e1d5      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d039      	beq.n	8001e08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d019      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001da2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001da8:	f7ff f91c 	bl	8000fe4 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001db0:	f7ff f918 	bl	8000fe4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1b2      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x4d4>
 8001dce:	e01b      	b.n	8001e08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_RCC_OscConfig+0x51c>)
 8001dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff f902 	bl	8000fe4 <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001de4:	f7ff f8fe 	bl	8000fe4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d904      	bls.n	8001dfc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e198      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
 8001df6:	bf00      	nop
 8001df8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dfc:	4ba3      	ldr	r3, [pc, #652]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ed      	bne.n	8001de4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8081 	beq.w	8001f18 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e16:	4b9e      	ldr	r3, [pc, #632]	; (8002090 <HAL_RCC_OscConfig+0x7b4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a9d      	ldr	r2, [pc, #628]	; (8002090 <HAL_RCC_OscConfig+0x7b4>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e22:	f7ff f8df 	bl	8000fe4 <HAL_GetTick>
 8001e26:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7ff f8db 	bl	8000fe4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b64      	cmp	r3, #100	; 0x64
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e175      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e3c:	4b94      	ldr	r3, [pc, #592]	; (8002090 <HAL_RCC_OscConfig+0x7b4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCC_OscConfig+0x582>
 8001e50:	4b8e      	ldr	r3, [pc, #568]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a8d      	ldr	r2, [pc, #564]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5c:	e02d      	b.n	8001eba <HAL_RCC_OscConfig+0x5de>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5a4>
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	4a88      	ldr	r2, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	6713      	str	r3, [r2, #112]	; 0x70
 8001e72:	4b86      	ldr	r3, [pc, #536]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e76:	4a85      	ldr	r2, [pc, #532]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001e78:	f023 0304 	bic.w	r3, r3, #4
 8001e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7e:	e01c      	b.n	8001eba <HAL_RCC_OscConfig+0x5de>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x5c6>
 8001e88:	4b80      	ldr	r3, [pc, #512]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a7f      	ldr	r2, [pc, #508]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
 8001e94:	4b7d      	ldr	r3, [pc, #500]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a7c      	ldr	r2, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	e00b      	b.n	8001eba <HAL_RCC_OscConfig+0x5de>
 8001ea2:	4b7a      	ldr	r3, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	4a79      	ldr	r2, [pc, #484]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6713      	str	r3, [r2, #112]	; 0x70
 8001eae:	4b77      	ldr	r3, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a76      	ldr	r2, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d015      	beq.n	8001eee <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec2:	f7ff f88f 	bl	8000fe4 <HAL_GetTick>
 8001ec6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7ff f88b 	bl	8000fe4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e123      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ee0:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ee      	beq.n	8001eca <HAL_RCC_OscConfig+0x5ee>
 8001eec:	e014      	b.n	8001f18 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7ff f879 	bl	8000fe4 <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7ff f875 	bl	8000fe4 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e10d      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f0c:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ee      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8102 	beq.w	8002126 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f22:	4b5a      	ldr	r3, [pc, #360]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f2a:	2b18      	cmp	r3, #24
 8001f2c:	f000 80bd 	beq.w	80020aa <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	f040 8095 	bne.w	8002064 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b54      	ldr	r3, [pc, #336]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a53      	ldr	r2, [pc, #332]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7ff f84d 	bl	8000fe4 <HAL_GetTick>
 8001f4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7ff f849 	bl	8000fe4 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0e3      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f60:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6c:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f70:	4b48      	ldr	r3, [pc, #288]	; (8002094 <HAL_RCC_OscConfig+0x7b8>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	4942      	ldr	r1, [pc, #264]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	628b      	str	r3, [r1, #40]	; 0x28
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	3b01      	subs	r3, #1
 8001f96:	025b      	lsls	r3, r3, #9
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	041b      	lsls	r3, r3, #16
 8001fa4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	061b      	lsls	r3, r3, #24
 8001fb2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fb6:	4935      	ldr	r1, [pc, #212]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001fbc:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fcc:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_RCC_OscConfig+0x7bc>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fd4:	00d2      	lsls	r2, r2, #3
 8001fd6:	492d      	ldr	r1, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	f023 020c 	bic.w	r2, r3, #12
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	4928      	ldr	r1, [pc, #160]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	f023 0202 	bic.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4924      	ldr	r1, [pc, #144]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002000:	4b22      	ldr	r3, [pc, #136]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	4a21      	ldr	r2, [pc, #132]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	4a1e      	ldr	r2, [pc, #120]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	4a1b      	ldr	r2, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 800201e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	4a18      	ldr	r2, [pc, #96]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a15      	ldr	r2, [pc, #84]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe ffd2 	bl	8000fe4 <HAL_GetTick>
 8002040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002044:	f7fe ffce 	bl	8000fe4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e068      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x768>
 8002062:	e060      	b.n	8002126 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_RCC_OscConfig+0x7b0>)
 800206a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800206e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe ffb8 	bl	8000fe4 <HAL_GetTick>
 8002074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002076:	e011      	b.n	800209c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe ffb4 	bl	8000fe4 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d90a      	bls.n	800209c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e04e      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
 800208a:	bf00      	nop
 800208c:	58024400 	.word	0x58024400
 8002090:	58024800 	.word	0x58024800
 8002094:	fffffc0c 	.word	0xfffffc0c
 8002098:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_OscConfig+0x854>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e7      	bne.n	8002078 <HAL_RCC_OscConfig+0x79c>
 80020a8:	e03d      	b.n	8002126 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020aa:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCC_OscConfig+0x854>)
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_RCC_OscConfig+0x854>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d031      	beq.n	8002122 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d12a      	bne.n	8002122 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d122      	bne.n	8002122 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d11a      	bne.n	8002122 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	0a5b      	lsrs	r3, r3, #9
 80020f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d111      	bne.n	8002122 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d108      	bne.n	8002122 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	0e1b      	lsrs	r3, r3, #24
 8002114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3730      	adds	r7, #48	; 0x30
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	58024400 	.word	0x58024400

08002134 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e19c      	b.n	8002482 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b8a      	ldr	r3, [pc, #552]	; (8002374 <HAL_RCC_ClockConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d910      	bls.n	8002178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b87      	ldr	r3, [pc, #540]	; (8002374 <HAL_RCC_ClockConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 020f 	bic.w	r2, r3, #15
 800215e:	4985      	ldr	r1, [pc, #532]	; (8002374 <HAL_RCC_ClockConfig+0x240>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b83      	ldr	r3, [pc, #524]	; (8002374 <HAL_RCC_ClockConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e184      	b.n	8002482 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d010      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	4b7b      	ldr	r3, [pc, #492]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002190:	429a      	cmp	r2, r3
 8002192:	d908      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002194:	4b78      	ldr	r3, [pc, #480]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	4975      	ldr	r1, [pc, #468]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d010      	beq.n	80021d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	4b70      	ldr	r3, [pc, #448]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021be:	429a      	cmp	r2, r3
 80021c0:	d908      	bls.n	80021d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021c2:	4b6d      	ldr	r3, [pc, #436]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	496a      	ldr	r1, [pc, #424]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d010      	beq.n	8002202 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699a      	ldr	r2, [r3, #24]
 80021e4:	4b64      	ldr	r3, [pc, #400]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d908      	bls.n	8002202 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021f0:	4b61      	ldr	r3, [pc, #388]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	495e      	ldr	r1, [pc, #376]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b00      	cmp	r3, #0
 800220c:	d010      	beq.n	8002230 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800221a:	429a      	cmp	r2, r3
 800221c:	d908      	bls.n	8002230 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800221e:	4b56      	ldr	r3, [pc, #344]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4953      	ldr	r1, [pc, #332]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 800222c:	4313      	orrs	r3, r2
 800222e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	4b4d      	ldr	r3, [pc, #308]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	429a      	cmp	r2, r3
 800224a:	d908      	bls.n	800225e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b4a      	ldr	r3, [pc, #296]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f023 020f 	bic.w	r2, r3, #15
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4947      	ldr	r1, [pc, #284]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 800225a:	4313      	orrs	r3, r2
 800225c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d055      	beq.n	8002316 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800226a:	4b43      	ldr	r3, [pc, #268]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4940      	ldr	r1, [pc, #256]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 8002278:	4313      	orrs	r3, r2
 800227a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d107      	bne.n	8002294 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002284:	4b3c      	ldr	r3, [pc, #240]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d121      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0f6      	b.n	8002482 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d107      	bne.n	80022ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800229c:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d115      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0ea      	b.n	8002482 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022b4:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0de      	b.n	8002482 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c4:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0d6      	b.n	8002482 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f023 0207 	bic.w	r2, r3, #7
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4925      	ldr	r1, [pc, #148]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7fe fe7d 	bl	8000fe4 <HAL_GetTick>
 80022ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ee:	f7fe fe79 	bl	8000fe4 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0be      	b.n	8002482 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002304:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	429a      	cmp	r2, r3
 8002314:	d1eb      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	429a      	cmp	r2, r3
 8002330:	d208      	bcs.n	8002344 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f023 020f 	bic.w	r2, r3, #15
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	490e      	ldr	r1, [pc, #56]	; (8002378 <HAL_RCC_ClockConfig+0x244>)
 8002340:	4313      	orrs	r3, r2
 8002342:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_ClockConfig+0x240>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d214      	bcs.n	800237c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_RCC_ClockConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 020f 	bic.w	r2, r3, #15
 800235a:	4906      	ldr	r1, [pc, #24]	; (8002374 <HAL_RCC_ClockConfig+0x240>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b04      	ldr	r3, [pc, #16]	; (8002374 <HAL_RCC_ClockConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e086      	b.n	8002482 <HAL_RCC_ClockConfig+0x34e>
 8002374:	52002000 	.word	0x52002000
 8002378:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002394:	429a      	cmp	r2, r3
 8002396:	d208      	bcs.n	80023aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002398:	4b3c      	ldr	r3, [pc, #240]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	4939      	ldr	r1, [pc, #228]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d010      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d208      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	492e      	ldr	r1, [pc, #184]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d010      	beq.n	8002406 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d208      	bcs.n	8002406 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4922      	ldr	r1, [pc, #136]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 8002402:	4313      	orrs	r3, r2
 8002404:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	2b00      	cmp	r3, #0
 8002410:	d010      	beq.n	8002434 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800241e:	429a      	cmp	r2, r3
 8002420:	d208      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002422:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4917      	ldr	r1, [pc, #92]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 8002430:	4313      	orrs	r3, r2
 8002432:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002434:	f000 f834 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	4912      	ldr	r1, [pc, #72]	; (8002490 <HAL_RCC_ClockConfig+0x35c>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
 8002450:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_RCC_ClockConfig+0x358>)
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	4a0d      	ldr	r2, [pc, #52]	; (8002490 <HAL_RCC_ClockConfig+0x35c>)
 800245c:	5cd3      	ldrb	r3, [r2, r3]
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <HAL_RCC_ClockConfig+0x360>)
 800246a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <HAL_RCC_ClockConfig+0x364>)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x368>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fd6a 	bl	8000f50 <HAL_InitTick>
 800247c:	4603      	mov	r3, r0
 800247e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	58024400 	.word	0x58024400
 8002490:	080059f4 	.word	0x080059f4
 8002494:	24000004 	.word	0x24000004
 8002498:	24000000 	.word	0x24000000
 800249c:	24000008 	.word	0x24000008

080024a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a6:	4bb3      	ldr	r3, [pc, #716]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ae:	2b18      	cmp	r3, #24
 80024b0:	f200 8155 	bhi.w	800275e <HAL_RCC_GetSysClockFreq+0x2be>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	08002521 	.word	0x08002521
 80024c0:	0800275f 	.word	0x0800275f
 80024c4:	0800275f 	.word	0x0800275f
 80024c8:	0800275f 	.word	0x0800275f
 80024cc:	0800275f 	.word	0x0800275f
 80024d0:	0800275f 	.word	0x0800275f
 80024d4:	0800275f 	.word	0x0800275f
 80024d8:	0800275f 	.word	0x0800275f
 80024dc:	08002547 	.word	0x08002547
 80024e0:	0800275f 	.word	0x0800275f
 80024e4:	0800275f 	.word	0x0800275f
 80024e8:	0800275f 	.word	0x0800275f
 80024ec:	0800275f 	.word	0x0800275f
 80024f0:	0800275f 	.word	0x0800275f
 80024f4:	0800275f 	.word	0x0800275f
 80024f8:	0800275f 	.word	0x0800275f
 80024fc:	0800254d 	.word	0x0800254d
 8002500:	0800275f 	.word	0x0800275f
 8002504:	0800275f 	.word	0x0800275f
 8002508:	0800275f 	.word	0x0800275f
 800250c:	0800275f 	.word	0x0800275f
 8002510:	0800275f 	.word	0x0800275f
 8002514:	0800275f 	.word	0x0800275f
 8002518:	0800275f 	.word	0x0800275f
 800251c:	08002553 	.word	0x08002553
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002520:	4b94      	ldr	r3, [pc, #592]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800252c:	4b91      	ldr	r3, [pc, #580]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	4a90      	ldr	r2, [pc, #576]	; (8002778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800253e:	e111      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002540:	4b8d      	ldr	r3, [pc, #564]	; (8002778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002542:	61bb      	str	r3, [r7, #24]
    break;
 8002544:	e10e      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002546:	4b8d      	ldr	r3, [pc, #564]	; (800277c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002548:	61bb      	str	r3, [r7, #24]
    break;
 800254a:	e10b      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800254c:	4b8c      	ldr	r3, [pc, #560]	; (8002780 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800254e:	61bb      	str	r3, [r7, #24]
    break;
 8002550:	e108      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002552:	4b88      	ldr	r3, [pc, #544]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800255c:	4b85      	ldr	r3, [pc, #532]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002566:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002568:	4b82      	ldr	r3, [pc, #520]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002572:	4b80      	ldr	r3, [pc, #512]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	08db      	lsrs	r3, r3, #3
 8002578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800258a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80e1 	beq.w	8002758 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b02      	cmp	r3, #2
 800259a:	f000 8083 	beq.w	80026a4 <HAL_RCC_GetSysClockFreq+0x204>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	f200 80a1 	bhi.w	80026e8 <HAL_RCC_GetSysClockFreq+0x248>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x114>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d056      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025b2:	e099      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025b4:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d02d      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025c0:	4b6c      	ldr	r3, [pc, #432]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	4a6b      	ldr	r2, [pc, #428]	; (8002778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ea:	4b62      	ldr	r3, [pc, #392]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80025fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800260a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800260e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800261a:	e087      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002626:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002788 <HAL_RCC_GetSysClockFreq+0x2e8>
 800262a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800262e:	4b51      	ldr	r3, [pc, #324]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800263e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002642:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800264a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800264e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800265e:	e065      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800278c <HAL_RCC_GetSysClockFreq+0x2ec>
 800266e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002672:	4b40      	ldr	r3, [pc, #256]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002682:	ed97 6a02 	vldr	s12, [r7, #8]
 8002686:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002784 <HAL_RCC_GetSysClockFreq+0x2e4>
 800268a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800268e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026a2:	e043      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002790 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026b6:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002784 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026e6:	e021      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800278c <HAL_RCC_GetSysClockFreq+0x2ec>
 80026f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800270a:	ed97 6a02 	vldr	s12, [r7, #8]
 800270e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800271a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800271e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800272a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	0a5b      	lsrs	r3, r3, #9
 8002732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002736:	3301      	adds	r3, #1
 8002738:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002744:	edd7 6a07 	vldr	s13, [r7, #28]
 8002748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800274c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002750:	ee17 3a90 	vmov	r3, s15
 8002754:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002756:	e005      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
    break;
 800275c:	e002      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002760:	61bb      	str	r3, [r7, #24]
    break;
 8002762:	bf00      	nop
  }

  return sysclockfreq;
 8002764:	69bb      	ldr	r3, [r7, #24]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	58024400 	.word	0x58024400
 8002778:	03d09000 	.word	0x03d09000
 800277c:	003d0900 	.word	0x003d0900
 8002780:	007a1200 	.word	0x007a1200
 8002784:	46000000 	.word	0x46000000
 8002788:	4c742400 	.word	0x4c742400
 800278c:	4a742400 	.word	0x4a742400
 8002790:	4af42400 	.word	0x4af42400

08002794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800279a:	f7ff fe81 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490f      	ldr	r1, [pc, #60]	; (80027e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_RCC_GetHCLKFreq+0x58>)
 80027d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027d2:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_RCC_GetHCLKFreq+0x58>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	58024400 	.word	0x58024400
 80027e8:	080059f4 	.word	0x080059f4
 80027ec:	24000004 	.word	0x24000004
 80027f0:	24000000 	.word	0x24000000

080027f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027f8:	f7ff ffcc 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4904      	ldr	r1, [pc, #16]	; (800281c <HAL_RCC_GetPCLK1Freq+0x28>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	58024400 	.word	0x58024400
 800281c:	080059f4 	.word	0x080059f4

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002824:	f7ff ffb6 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4904      	ldr	r1, [pc, #16]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	58024400 	.word	0x58024400
 8002848:	080059f4 	.word	0x080059f4

0800284c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002854:	2300      	movs	r3, #0
 8002856:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002858:	2300      	movs	r3, #0
 800285a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d03f      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800286c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002870:	d02a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002872:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002876:	d824      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800287c:	d018      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800287e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002882:	d81e      	bhi.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800288c:	d007      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800288e:	e018      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002890:	4bab      	ldr	r3, [pc, #684]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	4aaa      	ldr	r2, [pc, #680]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800289c:	e015      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2102      	movs	r1, #2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 f9cf 	bl	8003c48 <RCCEx_PLL2_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80028ae:	e00c      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3324      	adds	r3, #36	; 0x24
 80028b4:	2102      	movs	r1, #2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 fa78 	bl	8003dac <RCCEx_PLL3_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80028c0:	e003      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
      break;
 80028c6:	e000      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028d0:	4b9b      	ldr	r3, [pc, #620]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028dc:	4998      	ldr	r1, [pc, #608]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	650b      	str	r3, [r1, #80]	; 0x50
 80028e2:	e001      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d03d      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d826      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002919 	.word	0x08002919
 8002908:	08002927 	.word	0x08002927
 800290c:	08002939 	.word	0x08002939
 8002910:	08002951 	.word	0x08002951
 8002914:	08002951 	.word	0x08002951
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002918:	4b89      	ldr	r3, [pc, #548]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	4a88      	ldr	r2, [pc, #544]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800291e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002922:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002924:	e015      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3304      	adds	r3, #4
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f001 f98b 	bl	8003c48 <RCCEx_PLL2_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002936:	e00c      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3324      	adds	r3, #36	; 0x24
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fa34 	bl	8003dac <RCCEx_PLL3_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002948:	e003      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	75fb      	strb	r3, [r7, #23]
      break;
 800294e:	e000      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002958:	4b79      	ldr	r3, [pc, #484]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800295a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295c:	f023 0207 	bic.w	r2, r3, #7
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002964:	4976      	ldr	r1, [pc, #472]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	650b      	str	r3, [r1, #80]	; 0x50
 800296a:	e001      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002978:	2b00      	cmp	r3, #0
 800297a:	d042      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002984:	d02b      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298a:	d825      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800298c:	2bc0      	cmp	r3, #192	; 0xc0
 800298e:	d028      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002990:	2bc0      	cmp	r3, #192	; 0xc0
 8002992:	d821      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002994:	2b80      	cmp	r3, #128	; 0x80
 8002996:	d016      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d81d      	bhi.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d007      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80029a4:	e018      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029a6:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	4a65      	ldr	r2, [pc, #404]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80029b2:	e017      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3304      	adds	r3, #4
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 f944 	bl	8003c48 <RCCEx_PLL2_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80029c4:	e00e      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3324      	adds	r3, #36	; 0x24
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 f9ed 	bl	8003dac <RCCEx_PLL3_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80029d6:	e005      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	75fb      	strb	r3, [r7, #23]
      break;
 80029dc:	e002      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80029e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80029ea:	4b55      	ldr	r3, [pc, #340]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4952      	ldr	r1, [pc, #328]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	650b      	str	r3, [r1, #80]	; 0x50
 80029fc:	e001      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d049      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a18:	d030      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a1e:	d82a      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a24:	d02c      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002a26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a2a:	d824      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a30:	d018      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a36:	d81e      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002a3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a40:	d007      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002a42:	e018      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a44:	4b3e      	ldr	r3, [pc, #248]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	4a3d      	ldr	r2, [pc, #244]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a50:	e017      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 f8f5 	bl	8003c48 <RCCEx_PLL2_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a62:	e00e      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3324      	adds	r3, #36	; 0x24
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 f99e 	bl	8003dac <RCCEx_PLL3_Config>
 8002a70:	4603      	mov	r3, r0
 8002a72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a74:	e005      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	75fb      	strb	r3, [r7, #23]
      break;
 8002a7a:	e002      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002a7c:	bf00      	nop
 8002a7e:	e000      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a96:	492a      	ldr	r1, [pc, #168]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	658b      	str	r3, [r1, #88]	; 0x58
 8002a9c:	e001      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d04c      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab8:	d030      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002abe:	d82a      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ac0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ac4:	d02c      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002ac6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002aca:	d824      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ad0:	d018      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ad6:	d81e      	bhi.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae0:	d007      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002ae2:	e018      	b.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4a15      	ldr	r2, [pc, #84]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002af0:	e017      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 f8a5 	bl	8003c48 <RCCEx_PLL2_Config>
 8002afe:	4603      	mov	r3, r0
 8002b00:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b02:	e00e      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3324      	adds	r3, #36	; 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 f94e 	bl	8003dac <RCCEx_PLL3_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b14:	e005      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1a:	e002      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002b1c:	bf00      	nop
 8002b1e:	e000      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10d      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b36:	4902      	ldr	r1, [pc, #8]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	658b      	str	r3, [r1, #88]	; 0x58
 8002b3c:	e004      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002b3e:	bf00      	nop
 8002b40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d032      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	2b30      	cmp	r3, #48	; 0x30
 8002b5a:	d01c      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b5c:	2b30      	cmp	r3, #48	; 0x30
 8002b5e:	d817      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d00c      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d813      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d016      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d10f      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b70:	4baf      	ldr	r3, [pc, #700]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4aae      	ldr	r2, [pc, #696]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b7c:	e00e      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2102      	movs	r1, #2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 f85f 	bl	8003c48 <RCCEx_PLL2_Config>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002b8e:	e005      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	75fb      	strb	r3, [r7, #23]
      break;
 8002b94:	e002      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002b96:	bf00      	nop
 8002b98:	e000      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ba2:	4ba3      	ldr	r3, [pc, #652]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bae:	49a0      	ldr	r1, [pc, #640]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002bb4:	e001      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d047      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bce:	d030      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd4:	d82a      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002bd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bda:	d02c      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002bdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002be0:	d824      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be6:	d018      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bec:	d81e      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf6:	d007      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002bf8:	e018      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfa:	4b8d      	ldr	r3, [pc, #564]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	4a8c      	ldr	r2, [pc, #560]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c06:	e017      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 f81a 	bl	8003c48 <RCCEx_PLL2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c18:	e00e      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3324      	adds	r3, #36	; 0x24
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 f8c3 	bl	8003dac <RCCEx_PLL3_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c2a:	e005      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c30:	e002      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002c32:	bf00      	nop
 8002c34:	e000      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c3e:	4b7c      	ldr	r3, [pc, #496]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c42:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	4979      	ldr	r1, [pc, #484]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	650b      	str	r3, [r1, #80]	; 0x50
 8002c50:	e001      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c52:	7dfb      	ldrb	r3, [r7, #23]
 8002c54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d049      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6a:	d02e      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c70:	d828      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c76:	d02a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c7c:	d822      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c82:	d026      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002c84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c88:	d81c      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c8e:	d010      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c94:	d816      	bhi.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01d      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9e:	d111      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 ffce 	bl	8003c48 <RCCEx_PLL2_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002cb0:	e012      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3324      	adds	r3, #36	; 0x24
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 f877 	bl	8003dac <RCCEx_PLL3_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002cc2:	e009      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc8:	e006      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e004      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cea:	4951      	ldr	r1, [pc, #324]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	650b      	str	r3, [r1, #80]	; 0x50
 8002cf0:	e001      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d04b      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0c:	d02e      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d12:	d828      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d18:	d02a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1e:	d822      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d24:	d026      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002d26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d2a:	d81c      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d30:	d010      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d36:	d816      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01d      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d40:	d111      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 ff7d 	bl	8003c48 <RCCEx_PLL2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d52:	e012      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3324      	adds	r3, #36	; 0x24
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 f826 	bl	8003dac <RCCEx_PLL3_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d64:	e009      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
      break;
 8002d6a:	e006      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d6c:	bf00      	nop
 8002d6e:	e004      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d70:	bf00      	nop
 8002d72:	e002      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d74:	bf00      	nop
 8002d76:	e000      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d80:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d8e:	4928      	ldr	r1, [pc, #160]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	658b      	str	r3, [r1, #88]	; 0x58
 8002d94:	e001      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d02f      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dae:	d00e      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db4:	d814      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d015      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dbe:	d10f      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002dcc:	e00c      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 ff37 	bl	8003c48 <RCCEx_PLL2_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002dde:	e003      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
      break;
 8002de4:	e000      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8002de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfa:	490d      	ldr	r1, [pc, #52]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	650b      	str	r3, [r1, #80]	; 0x50
 8002e00:	e001      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d033      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d81c      	bhi.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e5b 	.word	0x08002e5b
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e43 	.word	0x08002e43
 8002e2c:	08002e5b 	.word	0x08002e5b
 8002e30:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e34:	4bb8      	ldr	r3, [pc, #736]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	4ab7      	ldr	r2, [pc, #732]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e40:	e00c      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fefd 	bl	8003c48 <RCCEx_PLL2_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e52:	e003      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
      break;
 8002e58:	e000      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e5c:	7dfb      	ldrb	r3, [r7, #23]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e62:	4bad      	ldr	r3, [pc, #692]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	49aa      	ldr	r1, [pc, #680]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e74:	e001      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8086 	beq.w	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e88:	4ba4      	ldr	r3, [pc, #656]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4aa3      	ldr	r2, [pc, #652]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e94:	f7fe f8a6 	bl	8000fe4 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e9a:	e009      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7fe f8a2 	bl	8000fe4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d902      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	75fb      	strb	r3, [r7, #23]
        break;
 8002eae:	e005      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eb0:	4b9a      	ldr	r3, [pc, #616]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ef      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d166      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ec2:	4b95      	ldr	r3, [pc, #596]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ecc:	4053      	eors	r3, r2
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d013      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ed6:	4b90      	ldr	r3, [pc, #576]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ede:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ee0:	4b8d      	ldr	r3, [pc, #564]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a8c      	ldr	r2, [pc, #560]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eec:	4b8a      	ldr	r3, [pc, #552]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a89      	ldr	r2, [pc, #548]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ef8:	4a87      	ldr	r2, [pc, #540]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f08:	d115      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f86b 	bl	8000fe4 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f10:	e00b      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe f867 	bl	8000fe4 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d902      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	75fb      	strb	r3, [r7, #23]
            break;
 8002f28:	e005      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f2a:	4b7b      	ldr	r3, [pc, #492]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0ed      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d126      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f4a:	d10d      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002f4c:	4b72      	ldr	r3, [pc, #456]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f5a:	0919      	lsrs	r1, r3, #4
 8002f5c:	4b70      	ldr	r3, [pc, #448]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002f5e:	400b      	ands	r3, r1
 8002f60:	496d      	ldr	r1, [pc, #436]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	610b      	str	r3, [r1, #16]
 8002f66:	e005      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002f68:	4b6b      	ldr	r3, [pc, #428]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	4a6a      	ldr	r2, [pc, #424]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f72:	6113      	str	r3, [r2, #16]
 8002f74:	4b68      	ldr	r3, [pc, #416]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f82:	4965      	ldr	r1, [pc, #404]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	670b      	str	r3, [r1, #112]	; 0x70
 8002f88:	e004      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	75bb      	strb	r3, [r7, #22]
 8002f8e:	e001      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d07e      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fa4:	2b28      	cmp	r3, #40	; 0x28
 8002fa6:	d867      	bhi.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	0800307f 	.word	0x0800307f
 8002fb4:	08003079 	.word	0x08003079
 8002fb8:	08003079 	.word	0x08003079
 8002fbc:	08003079 	.word	0x08003079
 8002fc0:	08003079 	.word	0x08003079
 8002fc4:	08003079 	.word	0x08003079
 8002fc8:	08003079 	.word	0x08003079
 8002fcc:	08003079 	.word	0x08003079
 8002fd0:	08003055 	.word	0x08003055
 8002fd4:	08003079 	.word	0x08003079
 8002fd8:	08003079 	.word	0x08003079
 8002fdc:	08003079 	.word	0x08003079
 8002fe0:	08003079 	.word	0x08003079
 8002fe4:	08003079 	.word	0x08003079
 8002fe8:	08003079 	.word	0x08003079
 8002fec:	08003079 	.word	0x08003079
 8002ff0:	08003067 	.word	0x08003067
 8002ff4:	08003079 	.word	0x08003079
 8002ff8:	08003079 	.word	0x08003079
 8002ffc:	08003079 	.word	0x08003079
 8003000:	08003079 	.word	0x08003079
 8003004:	08003079 	.word	0x08003079
 8003008:	08003079 	.word	0x08003079
 800300c:	08003079 	.word	0x08003079
 8003010:	0800307f 	.word	0x0800307f
 8003014:	08003079 	.word	0x08003079
 8003018:	08003079 	.word	0x08003079
 800301c:	08003079 	.word	0x08003079
 8003020:	08003079 	.word	0x08003079
 8003024:	08003079 	.word	0x08003079
 8003028:	08003079 	.word	0x08003079
 800302c:	08003079 	.word	0x08003079
 8003030:	0800307f 	.word	0x0800307f
 8003034:	08003079 	.word	0x08003079
 8003038:	08003079 	.word	0x08003079
 800303c:	08003079 	.word	0x08003079
 8003040:	08003079 	.word	0x08003079
 8003044:	08003079 	.word	0x08003079
 8003048:	08003079 	.word	0x08003079
 800304c:	08003079 	.word	0x08003079
 8003050:	0800307f 	.word	0x0800307f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	2101      	movs	r1, #1
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fdf4 	bl	8003c48 <RCCEx_PLL2_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003064:	e00c      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3324      	adds	r3, #36	; 0x24
 800306a:	2101      	movs	r1, #1
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fe9d 	bl	8003dac <RCCEx_PLL3_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003076:	e003      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
      break;
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800307e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003092:	4921      	ldr	r1, [pc, #132]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	654b      	str	r3, [r1, #84]	; 0x54
 8003098:	e001      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d03e      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d820      	bhi.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030fb 	.word	0x080030fb
 80030bc:	080030d1 	.word	0x080030d1
 80030c0:	080030e3 	.word	0x080030e3
 80030c4:	080030fb 	.word	0x080030fb
 80030c8:	080030fb 	.word	0x080030fb
 80030cc:	080030fb 	.word	0x080030fb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fdb6 	bl	8003c48 <RCCEx_PLL2_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80030e0:	e00c      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3324      	adds	r3, #36	; 0x24
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fe5f 	bl	8003dac <RCCEx_PLL3_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80030f2:	e003      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	75fb      	strb	r3, [r7, #23]
      break;
 80030f8:	e000      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80030fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d110      	bne.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003102:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f023 0207 	bic.w	r2, r3, #7
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310e:	4902      	ldr	r1, [pc, #8]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	654b      	str	r3, [r1, #84]	; 0x54
 8003114:	e008      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003116:	bf00      	nop
 8003118:	58024400 	.word	0x58024400
 800311c:	58024800 	.word	0x58024800
 8003120:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d039      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	2b05      	cmp	r3, #5
 800313c:	d820      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003187 	.word	0x08003187
 8003148:	0800315d 	.word	0x0800315d
 800314c:	0800316f 	.word	0x0800316f
 8003150:	08003187 	.word	0x08003187
 8003154:	08003187 	.word	0x08003187
 8003158:	08003187 	.word	0x08003187
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	2101      	movs	r1, #1
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fd70 	bl	8003c48 <RCCEx_PLL2_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800316c:	e00c      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3324      	adds	r3, #36	; 0x24
 8003172:	2101      	movs	r1, #1
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fe19 	bl	8003dac <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800317e:	e003      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
      break;
 8003184:	e000      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800318e:	4bb7      	ldr	r3, [pc, #732]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f023 0207 	bic.w	r2, r3, #7
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	49b3      	ldr	r1, [pc, #716]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	658b      	str	r3, [r1, #88]	; 0x58
 80031a2:	e001      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d04b      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031be:	d02e      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80031c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031c4:	d828      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d02a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80031cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d0:	d822      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80031d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031d6:	d026      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80031d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031dc:	d81c      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80031de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e2:	d010      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80031e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e8:	d816      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01d      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80031ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f2:	d111      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd24 	bl	8003c48 <RCCEx_PLL2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003204:	e012      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3324      	adds	r3, #36	; 0x24
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fdcd 	bl	8003dac <RCCEx_PLL3_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003216:	e009      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
      break;
 800321c:	e006      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800321e:	bf00      	nop
 8003220:	e004      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800322a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003232:	4b8e      	ldr	r3, [pc, #568]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003240:	498a      	ldr	r1, [pc, #552]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003242:	4313      	orrs	r3, r2
 8003244:	654b      	str	r3, [r1, #84]	; 0x54
 8003246:	e001      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d04b      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800325e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003262:	d02e      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003264:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003268:	d828      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d02a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003274:	d822      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003276:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800327a:	d026      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800327c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003280:	d81c      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003286:	d010      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328c:	d816      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01d      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003296:	d111      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fcd2 	bl	8003c48 <RCCEx_PLL2_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032a8:	e012      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3324      	adds	r3, #36	; 0x24
 80032ae:	2102      	movs	r1, #2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fd7b 	bl	8003dac <RCCEx_PLL3_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032ba:	e009      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
      break;
 80032c0:	e006      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80032c2:	bf00      	nop
 80032c4:	e004      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80032c6:	bf00      	nop
 80032c8:	e002      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80032ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d0:	7dfb      	ldrb	r3, [r7, #23]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032d6:	4b65      	ldr	r3, [pc, #404]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032e4:	4961      	ldr	r1, [pc, #388]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	658b      	str	r3, [r1, #88]	; 0x58
 80032ea:	e001      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d04b      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003302:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003306:	d02e      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003308:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800330c:	d828      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800330e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003312:	d02a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003318:	d822      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800331a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800331e:	d026      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003320:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003324:	d81c      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800332a:	d010      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800332c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003330:	d816      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01d      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333a:	d111      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fc80 	bl	8003c48 <RCCEx_PLL2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800334c:	e012      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3324      	adds	r3, #36	; 0x24
 8003352:	2102      	movs	r1, #2
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fd29 	bl	8003dac <RCCEx_PLL3_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800335e:	e009      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	75fb      	strb	r3, [r7, #23]
      break;
 8003364:	e006      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003366:	bf00      	nop
 8003368:	e004      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800336a:	bf00      	nop
 800336c:	e002      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800337a:	4b3c      	ldr	r3, [pc, #240]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003388:	4938      	ldr	r1, [pc, #224]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800338a:	4313      	orrs	r3, r2
 800338c:	658b      	str	r3, [r1, #88]	; 0x58
 800338e:	e001      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033aa:	d10a      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3324      	adds	r3, #36	; 0x24
 80033b0:	2102      	movs	r1, #2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fcfa 	bl	8003dac <RCCEx_PLL3_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033c2:	4b2a      	ldr	r3, [pc, #168]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d0:	4926      	ldr	r1, [pc, #152]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ec:	d10a      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3324      	adds	r3, #36	; 0x24
 80033f2:	2102      	movs	r1, #2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fcd9 	bl	8003dac <RCCEx_PLL3_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003412:	4916      	ldr	r1, [pc, #88]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003414:	4313      	orrs	r3, r2
 8003416:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d036      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800342a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800342e:	d01f      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003434:	d817      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343e:	d009      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003440:	e011      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fbfd 	bl	8003c48 <RCCEx_PLL2_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003452:	e00e      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3324      	adds	r3, #36	; 0x24
 8003458:	2102      	movs	r1, #2
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fca6 	bl	8003dac <RCCEx_PLL3_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003464:	e005      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
      break;
 800346a:	e002      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800346c:	58024400 	.word	0x58024400
      break;
 8003470:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10a      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003478:	4b93      	ldr	r3, [pc, #588]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003486:	4990      	ldr	r1, [pc, #576]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003488:	4313      	orrs	r3, r2
 800348a:	658b      	str	r3, [r1, #88]	; 0x58
 800348c:	e001      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d033      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a8:	d01c      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80034aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ae:	d816      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80034b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b4:	d003      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80034b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ba:	d007      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80034bc:	e00f      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034be:	4b82      	ldr	r3, [pc, #520]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	4a81      	ldr	r2, [pc, #516]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80034ca:	e00c      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3324      	adds	r3, #36	; 0x24
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fc6a 	bl	8003dac <RCCEx_PLL3_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80034dc:	e003      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
      break;
 80034e2:	e000      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80034e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ec:	4b76      	ldr	r3, [pc, #472]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fa:	4973      	ldr	r1, [pc, #460]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	654b      	str	r3, [r1, #84]	; 0x54
 8003500:	e001      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d029      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d007      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003520:	e00f      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003522:	4b69      	ldr	r3, [pc, #420]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	4a68      	ldr	r2, [pc, #416]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800352e:	e00b      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	2102      	movs	r1, #2
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fb86 	bl	8003c48 <RCCEx_PLL2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003540:	e002      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
      break;
 8003546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800354e:	4b5e      	ldr	r3, [pc, #376]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355a:	495b      	ldr	r1, [pc, #364]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800355c:	4313      	orrs	r3, r2
 800355e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003560:	e001      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3324      	adds	r3, #36	; 0x24
 8003576:	2102      	movs	r1, #2
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fc17 	bl	8003dac <RCCEx_PLL3_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d030      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800359c:	d017      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800359e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a2:	d811      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80035a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a8:	d013      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80035aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ae:	d80b      	bhi.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80035b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b8:	d106      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ba:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	4a42      	ldr	r2, [pc, #264]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80035c6:	e007      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	75fb      	strb	r3, [r7, #23]
      break;
 80035cc:	e004      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80035d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035de:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ea:	4937      	ldr	r1, [pc, #220]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	654b      	str	r3, [r1, #84]	; 0x54
 80035f0:	e001      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003602:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	492e      	ldr	r1, [pc, #184]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003610:	4313      	orrs	r3, r2
 8003612:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003620:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800362e:	4926      	ldr	r1, [pc, #152]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003630:	4313      	orrs	r3, r2
 8003632:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003640:	4b21      	ldr	r3, [pc, #132]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800364c:	491e      	ldr	r1, [pc, #120]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800364e:	4313      	orrs	r3, r2
 8003650:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800365e:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003664:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003668:	6113      	str	r3, [r2, #16]
 800366a:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003674:	4914      	ldr	r1, [pc, #80]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	da08      	bge.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003682:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003686:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368e:	490e      	ldr	r1, [pc, #56]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003690:	4313      	orrs	r3, r2
 8003692:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	4906      	ldr	r1, [pc, #24]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80036b4:	7dbb      	ldrb	r3, [r7, #22]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	58024400 	.word	0x58024400

080036cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80036d0:	f7ff f860 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4904      	ldr	r1, [pc, #16]	; (80036f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	58024400 	.word	0x58024400
 80036f4:	080059f4 	.word	0x080059f4

080036f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	; 0x24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003700:	4ba1      	ldr	r3, [pc, #644]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800370a:	4b9f      	ldr	r3, [pc, #636]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	0b1b      	lsrs	r3, r3, #12
 8003710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003714:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003716:	4b9c      	ldr	r3, [pc, #624]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003722:	4b99      	ldr	r3, [pc, #612]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003726:	08db      	lsrs	r3, r3, #3
 8003728:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8111 	beq.w	8003968 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b02      	cmp	r3, #2
 800374a:	f000 8083 	beq.w	8003854 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b02      	cmp	r3, #2
 8003752:	f200 80a1 	bhi.w	8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d056      	beq.n	8003810 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003762:	e099      	b.n	8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003764:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02d      	beq.n	80037cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003770:	4b85      	ldr	r3, [pc, #532]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	08db      	lsrs	r3, r3, #3
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	4a84      	ldr	r2, [pc, #528]	; (800398c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
 8003780:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	ee07 3a90 	vmov	s15, r3
 8003788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800379a:	4b7b      	ldr	r3, [pc, #492]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80037ca:	e087      	b.n	80038dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003994 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80037da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037de:	4b6a      	ldr	r3, [pc, #424]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80037f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800380e:	e065      	b.n	80038dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800381e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003822:	4b59      	ldr	r3, [pc, #356]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003832:	ed97 6a03 	vldr	s12, [r7, #12]
 8003836:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800383a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800384a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003852:	e043      	b.n	80038dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800399c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003866:	4b48      	ldr	r3, [pc, #288]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003876:	ed97 6a03 	vldr	s12, [r7, #12]
 800387a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800387e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800388a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800388e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003892:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003896:	e021      	b.n	80038dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80038be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80038dc:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	0a5b      	lsrs	r3, r3, #9
 80038e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80038fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003902:	ee17 2a90 	vmov	r2, s15
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800390a:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	0c1b      	lsrs	r3, r3, #16
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003920:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003924:	edd7 6a07 	vldr	s13, [r7, #28]
 8003928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800392c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003930:	ee17 2a90 	vmov	r2, s15
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003938:	4b13      	ldr	r3, [pc, #76]	; (8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	0e1b      	lsrs	r3, r3, #24
 800393e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800394e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003952:	edd7 6a07 	vldr	s13, [r7, #28]
 8003956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800395e:	ee17 2a90 	vmov	r2, s15
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003966:	e008      	b.n	800397a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
}
 800397a:	bf00      	nop
 800397c:	3724      	adds	r7, #36	; 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	58024400 	.word	0x58024400
 800398c:	03d09000 	.word	0x03d09000
 8003990:	46000000 	.word	0x46000000
 8003994:	4c742400 	.word	0x4c742400
 8003998:	4a742400 	.word	0x4a742400
 800399c:	4af42400 	.word	0x4af42400

080039a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	; 0x24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039a8:	4ba1      	ldr	r3, [pc, #644]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80039b2:	4b9f      	ldr	r3, [pc, #636]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	0d1b      	lsrs	r3, r3, #20
 80039b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039be:	4b9c      	ldr	r3, [pc, #624]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80039ca:	4b99      	ldr	r3, [pc, #612]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	08db      	lsrs	r3, r3, #3
 80039d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8111 	beq.w	8003c10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	f000 8083 	beq.w	8003afc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	f200 80a1 	bhi.w	8003b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d056      	beq.n	8003ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a0a:	e099      	b.n	8003b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a0c:	4b88      	ldr	r3, [pc, #544]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02d      	beq.n	8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a18:	4b85      	ldr	r3, [pc, #532]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	08db      	lsrs	r3, r3, #3
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	4a84      	ldr	r2, [pc, #528]	; (8003c34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
 8003a28:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	ee07 3a90 	vmov	s15, r3
 8003a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a42:	4b7b      	ldr	r3, [pc, #492]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a72:	e087      	b.n	8003b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a86:	4b6a      	ldr	r3, [pc, #424]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ab6:	e065      	b.n	8003b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aca:	4b59      	ldr	r3, [pc, #356]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ade:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003afa:	e043      	b.n	8003b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0e:	4b48      	ldr	r3, [pc, #288]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b3e:	e021      	b.n	8003b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003b84:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	0a5b      	lsrs	r3, r3, #9
 8003b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 2a90 	vmov	r2, s15
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003bb2:	4b1f      	ldr	r3, [pc, #124]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	0c1b      	lsrs	r3, r3, #16
 8003bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bbc:	ee07 3a90 	vmov	s15, r3
 8003bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd8:	ee17 2a90 	vmov	r2, s15
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	0e1b      	lsrs	r3, r3, #24
 8003be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c06:	ee17 2a90 	vmov	r2, s15
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c0e:	e008      	b.n	8003c22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	bf00      	nop
 8003c24:	3724      	adds	r7, #36	; 0x24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	58024400 	.word	0x58024400
 8003c34:	03d09000 	.word	0x03d09000
 8003c38:	46000000 	.word	0x46000000
 8003c3c:	4c742400 	.word	0x4c742400
 8003c40:	4a742400 	.word	0x4a742400
 8003c44:	4af42400 	.word	0x4af42400

08003c48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c56:	4b53      	ldr	r3, [pc, #332]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d101      	bne.n	8003c66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e099      	b.n	8003d9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c66:	4b4f      	ldr	r3, [pc, #316]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a4e      	ldr	r2, [pc, #312]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003c6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c72:	f7fd f9b7 	bl	8000fe4 <HAL_GetTick>
 8003c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c7a:	f7fd f9b3 	bl	8000fe4 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e086      	b.n	8003d9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003c8c:	4b45      	ldr	r3, [pc, #276]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003c98:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	493f      	ldr	r1, [pc, #252]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	628b      	str	r3, [r1, #40]	; 0x28
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	025b      	lsls	r3, r3, #9
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003cdc:	4931      	ldr	r1, [pc, #196]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ce2:	4b30      	ldr	r3, [pc, #192]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	492d      	ldr	r1, [pc, #180]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	f023 0220 	bic.w	r2, r3, #32
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	4928      	ldr	r1, [pc, #160]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d06:	4b27      	ldr	r3, [pc, #156]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d0c:	f023 0310 	bic.w	r3, r3, #16
 8003d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d12:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d16:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <RCCEx_PLL2_Config+0x160>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	69d2      	ldr	r2, [r2, #28]
 8003d1e:	00d2      	lsls	r2, r2, #3
 8003d20:	4920      	ldr	r1, [pc, #128]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d26:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d2c:	f043 0310 	orr.w	r3, r3, #16
 8003d30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d38:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d44:	e00f      	b.n	8003d66 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d106      	bne.n	8003d5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d4c:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d58:	e005      	b.n	8003d66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d5a:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	4a11      	ldr	r2, [pc, #68]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d66:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a0e      	ldr	r2, [pc, #56]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d72:	f7fd f937 	bl	8000fe4 <HAL_GetTick>
 8003d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d78:	e008      	b.n	8003d8c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d7a:	f7fd f933 	bl	8000fe4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e006      	b.n	8003d9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	58024400 	.word	0x58024400
 8003da8:	ffff0007 	.word	0xffff0007

08003dac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dba:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d101      	bne.n	8003dca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e099      	b.n	8003efe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003dca:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a4e      	ldr	r2, [pc, #312]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd6:	f7fd f905 	bl	8000fe4 <HAL_GetTick>
 8003dda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ddc:	e008      	b.n	8003df0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003dde:	f7fd f901 	bl	8000fe4 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e086      	b.n	8003efe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003df0:	4b45      	ldr	r3, [pc, #276]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003dfc:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	051b      	lsls	r3, r3, #20
 8003e0a:	493f      	ldr	r1, [pc, #252]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	628b      	str	r3, [r1, #40]	; 0x28
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	025b      	lsls	r3, r3, #9
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	061b      	lsls	r3, r3, #24
 8003e3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e40:	4931      	ldr	r1, [pc, #196]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e46:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	492d      	ldr	r1, [pc, #180]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	4928      	ldr	r1, [pc, #160]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e6a:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	4a26      	ldr	r2, [pc, #152]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e7a:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <RCCEx_PLL3_Config+0x160>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	69d2      	ldr	r2, [r2, #28]
 8003e82:	00d2      	lsls	r2, r2, #3
 8003e84:	4920      	ldr	r1, [pc, #128]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e8a:	4b1f      	ldr	r3, [pc, #124]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003ea2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ea8:	e00f      	b.n	8003eca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d106      	bne.n	8003ebe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003eb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ebc:	e005      	b.n	8003eca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed6:	f7fd f885 	bl	8000fe4 <HAL_GetTick>
 8003eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003edc:	e008      	b.n	8003ef0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ede:	f7fd f881 	bl	8000fe4 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e006      	b.n	8003efe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	ffff0007 	.word	0xffff0007

08003f10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e08f      	b.n	8004044 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7fc fdc7 	bl	8000acc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6899      	ldr	r1, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b3e      	ldr	r3, [pc, #248]	; (800404c <HAL_TIM_Encoder_Init+0x13c>)
 8003f52:	400b      	ands	r3, r1
 8003f54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f000 f87b 	bl	800405c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_TIM_Encoder_Init+0x140>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	; (8004054 <HAL_TIM_Encoder_Init+0x144>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_TIM_Encoder_Init+0x148>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	011a      	lsls	r2, r3, #4
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	031b      	lsls	r3, r3, #12
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003fde:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003fe6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	fffebff8 	.word	0xfffebff8
 8004050:	fffffcfc 	.word	0xfffffcfc
 8004054:	fffff3f3 	.word	0xfffff3f3
 8004058:	ffff0f0f 	.word	0xffff0f0f

0800405c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a40      	ldr	r2, [pc, #256]	; (8004170 <TIM_Base_SetConfig+0x114>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407a:	d00f      	beq.n	800409c <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3d      	ldr	r2, [pc, #244]	; (8004174 <TIM_Base_SetConfig+0x118>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00b      	beq.n	800409c <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3c      	ldr	r2, [pc, #240]	; (8004178 <TIM_Base_SetConfig+0x11c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d007      	beq.n	800409c <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3b      	ldr	r2, [pc, #236]	; (800417c <TIM_Base_SetConfig+0x120>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0x40>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a3a      	ldr	r2, [pc, #232]	; (8004180 <TIM_Base_SetConfig+0x124>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d108      	bne.n	80040ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a2f      	ldr	r2, [pc, #188]	; (8004170 <TIM_Base_SetConfig+0x114>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01f      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040bc:	d01b      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2c      	ldr	r2, [pc, #176]	; (8004174 <TIM_Base_SetConfig+0x118>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d017      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2b      	ldr	r2, [pc, #172]	; (8004178 <TIM_Base_SetConfig+0x11c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2a      	ldr	r2, [pc, #168]	; (800417c <TIM_Base_SetConfig+0x120>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00f      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a29      	ldr	r2, [pc, #164]	; (8004180 <TIM_Base_SetConfig+0x124>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00b      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a28      	ldr	r2, [pc, #160]	; (8004184 <TIM_Base_SetConfig+0x128>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a27      	ldr	r2, [pc, #156]	; (8004188 <TIM_Base_SetConfig+0x12c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d003      	beq.n	80040f6 <TIM_Base_SetConfig+0x9a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a26      	ldr	r2, [pc, #152]	; (800418c <TIM_Base_SetConfig+0x130>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d108      	bne.n	8004108 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a10      	ldr	r2, [pc, #64]	; (8004170 <TIM_Base_SetConfig+0x114>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00f      	beq.n	8004154 <TIM_Base_SetConfig+0xf8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <TIM_Base_SetConfig+0x124>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00b      	beq.n	8004154 <TIM_Base_SetConfig+0xf8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a11      	ldr	r2, [pc, #68]	; (8004184 <TIM_Base_SetConfig+0x128>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d007      	beq.n	8004154 <TIM_Base_SetConfig+0xf8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a10      	ldr	r2, [pc, #64]	; (8004188 <TIM_Base_SetConfig+0x12c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <TIM_Base_SetConfig+0xf8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a0f      	ldr	r2, [pc, #60]	; (800418c <TIM_Base_SetConfig+0x130>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d103      	bne.n	800415c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	615a      	str	r2, [r3, #20]
}
 8004162:	bf00      	nop
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800
 800417c:	40000c00 	.word	0x40000c00
 8004180:	40010400 	.word	0x40010400
 8004184:	40014000 	.word	0x40014000
 8004188:	40014400 	.word	0x40014400
 800418c:	40014800 	.word	0x40014800

08004190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e06d      	b.n	8004284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a30      	ldr	r2, [pc, #192]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2f      	ldr	r2, [pc, #188]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d108      	bne.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a20      	ldr	r2, [pc, #128]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d022      	beq.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421a:	d01d      	beq.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d018      	beq.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1c      	ldr	r2, [pc, #112]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1a      	ldr	r2, [pc, #104]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a15      	ldr	r2, [pc, #84]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a16      	ldr	r2, [pc, #88]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d10c      	bne.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	4313      	orrs	r3, r2
 8004268:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	40010000 	.word	0x40010000
 8004294:	40010400 	.word	0x40010400
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40001800 	.word	0x40001800
 80042a8:	40014000 	.word	0x40014000

080042ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e042      	b.n	8004344 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d106      	bne.n	80042d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7fc fc45 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2224      	movs	r2, #36	; 0x24
 80042da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f82c 	bl	800434c <UART_SetConfig>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e022      	b.n	8004344 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fd80 	bl	8004e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800431a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800432a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fe07 	bl	8004f50 <UART_CheckIdleState>
 8004342:	4603      	mov	r3, r0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800434c:	b5b0      	push	{r4, r5, r7, lr}
 800434e:	b08e      	sub	sp, #56	; 0x38
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4313      	orrs	r3, r2
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4bbf      	ldr	r3, [pc, #764]	; (8004678 <UART_SetConfig+0x32c>)
 800437a:	4013      	ands	r3, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004382:	430b      	orrs	r3, r1
 8004384:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4ab5      	ldr	r2, [pc, #724]	; (800467c <UART_SetConfig+0x330>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043b2:	4313      	orrs	r3, r2
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	4bb0      	ldr	r3, [pc, #704]	; (8004680 <UART_SetConfig+0x334>)
 80043be:	4013      	ands	r3, r2
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80043c6:	430b      	orrs	r3, r1
 80043c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	f023 010f 	bic.w	r1, r3, #15
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4aa7      	ldr	r2, [pc, #668]	; (8004684 <UART_SetConfig+0x338>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d176      	bne.n	80044d8 <UART_SetConfig+0x18c>
 80043ea:	4ba7      	ldr	r3, [pc, #668]	; (8004688 <UART_SetConfig+0x33c>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043f2:	2b28      	cmp	r3, #40	; 0x28
 80043f4:	d86c      	bhi.n	80044d0 <UART_SetConfig+0x184>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <UART_SetConfig+0xb0>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	080044a1 	.word	0x080044a1
 8004400:	080044d1 	.word	0x080044d1
 8004404:	080044d1 	.word	0x080044d1
 8004408:	080044d1 	.word	0x080044d1
 800440c:	080044d1 	.word	0x080044d1
 8004410:	080044d1 	.word	0x080044d1
 8004414:	080044d1 	.word	0x080044d1
 8004418:	080044d1 	.word	0x080044d1
 800441c:	080044a9 	.word	0x080044a9
 8004420:	080044d1 	.word	0x080044d1
 8004424:	080044d1 	.word	0x080044d1
 8004428:	080044d1 	.word	0x080044d1
 800442c:	080044d1 	.word	0x080044d1
 8004430:	080044d1 	.word	0x080044d1
 8004434:	080044d1 	.word	0x080044d1
 8004438:	080044d1 	.word	0x080044d1
 800443c:	080044b1 	.word	0x080044b1
 8004440:	080044d1 	.word	0x080044d1
 8004444:	080044d1 	.word	0x080044d1
 8004448:	080044d1 	.word	0x080044d1
 800444c:	080044d1 	.word	0x080044d1
 8004450:	080044d1 	.word	0x080044d1
 8004454:	080044d1 	.word	0x080044d1
 8004458:	080044d1 	.word	0x080044d1
 800445c:	080044b9 	.word	0x080044b9
 8004460:	080044d1 	.word	0x080044d1
 8004464:	080044d1 	.word	0x080044d1
 8004468:	080044d1 	.word	0x080044d1
 800446c:	080044d1 	.word	0x080044d1
 8004470:	080044d1 	.word	0x080044d1
 8004474:	080044d1 	.word	0x080044d1
 8004478:	080044d1 	.word	0x080044d1
 800447c:	080044c1 	.word	0x080044c1
 8004480:	080044d1 	.word	0x080044d1
 8004484:	080044d1 	.word	0x080044d1
 8004488:	080044d1 	.word	0x080044d1
 800448c:	080044d1 	.word	0x080044d1
 8004490:	080044d1 	.word	0x080044d1
 8004494:	080044d1 	.word	0x080044d1
 8004498:	080044d1 	.word	0x080044d1
 800449c:	080044c9 	.word	0x080044c9
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044a6:	e222      	b.n	80048ee <UART_SetConfig+0x5a2>
 80044a8:	2304      	movs	r3, #4
 80044aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ae:	e21e      	b.n	80048ee <UART_SetConfig+0x5a2>
 80044b0:	2308      	movs	r3, #8
 80044b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044b6:	e21a      	b.n	80048ee <UART_SetConfig+0x5a2>
 80044b8:	2310      	movs	r3, #16
 80044ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044be:	e216      	b.n	80048ee <UART_SetConfig+0x5a2>
 80044c0:	2320      	movs	r3, #32
 80044c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044c6:	e212      	b.n	80048ee <UART_SetConfig+0x5a2>
 80044c8:	2340      	movs	r3, #64	; 0x40
 80044ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044ce:	e20e      	b.n	80048ee <UART_SetConfig+0x5a2>
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80044d6:	e20a      	b.n	80048ee <UART_SetConfig+0x5a2>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a6b      	ldr	r2, [pc, #428]	; (800468c <UART_SetConfig+0x340>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d130      	bne.n	8004544 <UART_SetConfig+0x1f8>
 80044e2:	4b69      	ldr	r3, [pc, #420]	; (8004688 <UART_SetConfig+0x33c>)
 80044e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d826      	bhi.n	800453c <UART_SetConfig+0x1f0>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x1a8>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	0800450d 	.word	0x0800450d
 80044f8:	08004515 	.word	0x08004515
 80044fc:	0800451d 	.word	0x0800451d
 8004500:	08004525 	.word	0x08004525
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004535 	.word	0x08004535
 800450c:	2300      	movs	r3, #0
 800450e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004512:	e1ec      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004514:	2304      	movs	r3, #4
 8004516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800451a:	e1e8      	b.n	80048ee <UART_SetConfig+0x5a2>
 800451c:	2308      	movs	r3, #8
 800451e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004522:	e1e4      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004524:	2310      	movs	r3, #16
 8004526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800452a:	e1e0      	b.n	80048ee <UART_SetConfig+0x5a2>
 800452c:	2320      	movs	r3, #32
 800452e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004532:	e1dc      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004534:	2340      	movs	r3, #64	; 0x40
 8004536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800453a:	e1d8      	b.n	80048ee <UART_SetConfig+0x5a2>
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004542:	e1d4      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a51      	ldr	r2, [pc, #324]	; (8004690 <UART_SetConfig+0x344>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d130      	bne.n	80045b0 <UART_SetConfig+0x264>
 800454e:	4b4e      	ldr	r3, [pc, #312]	; (8004688 <UART_SetConfig+0x33c>)
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	2b05      	cmp	r3, #5
 8004558:	d826      	bhi.n	80045a8 <UART_SetConfig+0x25c>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <UART_SetConfig+0x214>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004579 	.word	0x08004579
 8004564:	08004581 	.word	0x08004581
 8004568:	08004589 	.word	0x08004589
 800456c:	08004591 	.word	0x08004591
 8004570:	08004599 	.word	0x08004599
 8004574:	080045a1 	.word	0x080045a1
 8004578:	2300      	movs	r3, #0
 800457a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800457e:	e1b6      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004586:	e1b2      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800458e:	e1ae      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004596:	e1aa      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004598:	2320      	movs	r3, #32
 800459a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800459e:	e1a6      	b.n	80048ee <UART_SetConfig+0x5a2>
 80045a0:	2340      	movs	r3, #64	; 0x40
 80045a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045a6:	e1a2      	b.n	80048ee <UART_SetConfig+0x5a2>
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ae:	e19e      	b.n	80048ee <UART_SetConfig+0x5a2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a37      	ldr	r2, [pc, #220]	; (8004694 <UART_SetConfig+0x348>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d130      	bne.n	800461c <UART_SetConfig+0x2d0>
 80045ba:	4b33      	ldr	r3, [pc, #204]	; (8004688 <UART_SetConfig+0x33c>)
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	2b05      	cmp	r3, #5
 80045c4:	d826      	bhi.n	8004614 <UART_SetConfig+0x2c8>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0x280>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	080045e5 	.word	0x080045e5
 80045d0:	080045ed 	.word	0x080045ed
 80045d4:	080045f5 	.word	0x080045f5
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	08004605 	.word	0x08004605
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ea:	e180      	b.n	80048ee <UART_SetConfig+0x5a2>
 80045ec:	2304      	movs	r3, #4
 80045ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045f2:	e17c      	b.n	80048ee <UART_SetConfig+0x5a2>
 80045f4:	2308      	movs	r3, #8
 80045f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045fa:	e178      	b.n	80048ee <UART_SetConfig+0x5a2>
 80045fc:	2310      	movs	r3, #16
 80045fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004602:	e174      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004604:	2320      	movs	r3, #32
 8004606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800460a:	e170      	b.n	80048ee <UART_SetConfig+0x5a2>
 800460c:	2340      	movs	r3, #64	; 0x40
 800460e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004612:	e16c      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800461a:	e168      	b.n	80048ee <UART_SetConfig+0x5a2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <UART_SetConfig+0x34c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d142      	bne.n	80046ac <UART_SetConfig+0x360>
 8004626:	4b18      	ldr	r3, [pc, #96]	; (8004688 <UART_SetConfig+0x33c>)
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	2b05      	cmp	r3, #5
 8004630:	d838      	bhi.n	80046a4 <UART_SetConfig+0x358>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <UART_SetConfig+0x2ec>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	08004651 	.word	0x08004651
 800463c:	08004659 	.word	0x08004659
 8004640:	08004661 	.word	0x08004661
 8004644:	08004669 	.word	0x08004669
 8004648:	08004671 	.word	0x08004671
 800464c:	0800469d 	.word	0x0800469d
 8004650:	2300      	movs	r3, #0
 8004652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004656:	e14a      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004658:	2304      	movs	r3, #4
 800465a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800465e:	e146      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004660:	2308      	movs	r3, #8
 8004662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004666:	e142      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004668:	2310      	movs	r3, #16
 800466a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800466e:	e13e      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004670:	2320      	movs	r3, #32
 8004672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004676:	e13a      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004678:	cfff69f3 	.word	0xcfff69f3
 800467c:	58000c00 	.word	0x58000c00
 8004680:	11fff4ff 	.word	0x11fff4ff
 8004684:	40011000 	.word	0x40011000
 8004688:	58024400 	.word	0x58024400
 800468c:	40004400 	.word	0x40004400
 8004690:	40004800 	.word	0x40004800
 8004694:	40004c00 	.word	0x40004c00
 8004698:	40005000 	.word	0x40005000
 800469c:	2340      	movs	r3, #64	; 0x40
 800469e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046a2:	e124      	b.n	80048ee <UART_SetConfig+0x5a2>
 80046a4:	2380      	movs	r3, #128	; 0x80
 80046a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80046aa:	e120      	b.n	80048ee <UART_SetConfig+0x5a2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4acc      	ldr	r2, [pc, #816]	; (80049e4 <UART_SetConfig+0x698>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d176      	bne.n	80047a4 <UART_SetConfig+0x458>
 80046b6:	4bcc      	ldr	r3, [pc, #816]	; (80049e8 <UART_SetConfig+0x69c>)
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046be:	2b28      	cmp	r3, #40	; 0x28
 80046c0:	d86c      	bhi.n	800479c <UART_SetConfig+0x450>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x37c>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	0800476d 	.word	0x0800476d
 80046cc:	0800479d 	.word	0x0800479d
 80046d0:	0800479d 	.word	0x0800479d
 80046d4:	0800479d 	.word	0x0800479d
 80046d8:	0800479d 	.word	0x0800479d
 80046dc:	0800479d 	.word	0x0800479d
 80046e0:	0800479d 	.word	0x0800479d
 80046e4:	0800479d 	.word	0x0800479d
 80046e8:	08004775 	.word	0x08004775
 80046ec:	0800479d 	.word	0x0800479d
 80046f0:	0800479d 	.word	0x0800479d
 80046f4:	0800479d 	.word	0x0800479d
 80046f8:	0800479d 	.word	0x0800479d
 80046fc:	0800479d 	.word	0x0800479d
 8004700:	0800479d 	.word	0x0800479d
 8004704:	0800479d 	.word	0x0800479d
 8004708:	0800477d 	.word	0x0800477d
 800470c:	0800479d 	.word	0x0800479d
 8004710:	0800479d 	.word	0x0800479d
 8004714:	0800479d 	.word	0x0800479d
 8004718:	0800479d 	.word	0x0800479d
 800471c:	0800479d 	.word	0x0800479d
 8004720:	0800479d 	.word	0x0800479d
 8004724:	0800479d 	.word	0x0800479d
 8004728:	08004785 	.word	0x08004785
 800472c:	0800479d 	.word	0x0800479d
 8004730:	0800479d 	.word	0x0800479d
 8004734:	0800479d 	.word	0x0800479d
 8004738:	0800479d 	.word	0x0800479d
 800473c:	0800479d 	.word	0x0800479d
 8004740:	0800479d 	.word	0x0800479d
 8004744:	0800479d 	.word	0x0800479d
 8004748:	0800478d 	.word	0x0800478d
 800474c:	0800479d 	.word	0x0800479d
 8004750:	0800479d 	.word	0x0800479d
 8004754:	0800479d 	.word	0x0800479d
 8004758:	0800479d 	.word	0x0800479d
 800475c:	0800479d 	.word	0x0800479d
 8004760:	0800479d 	.word	0x0800479d
 8004764:	0800479d 	.word	0x0800479d
 8004768:	08004795 	.word	0x08004795
 800476c:	2301      	movs	r3, #1
 800476e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004772:	e0bc      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004774:	2304      	movs	r3, #4
 8004776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800477a:	e0b8      	b.n	80048ee <UART_SetConfig+0x5a2>
 800477c:	2308      	movs	r3, #8
 800477e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004782:	e0b4      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004784:	2310      	movs	r3, #16
 8004786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800478a:	e0b0      	b.n	80048ee <UART_SetConfig+0x5a2>
 800478c:	2320      	movs	r3, #32
 800478e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004792:	e0ac      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004794:	2340      	movs	r3, #64	; 0x40
 8004796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800479a:	e0a8      	b.n	80048ee <UART_SetConfig+0x5a2>
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047a2:	e0a4      	b.n	80048ee <UART_SetConfig+0x5a2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a90      	ldr	r2, [pc, #576]	; (80049ec <UART_SetConfig+0x6a0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d130      	bne.n	8004810 <UART_SetConfig+0x4c4>
 80047ae:	4b8e      	ldr	r3, [pc, #568]	; (80049e8 <UART_SetConfig+0x69c>)
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	d826      	bhi.n	8004808 <UART_SetConfig+0x4bc>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <UART_SetConfig+0x474>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047d9 	.word	0x080047d9
 80047c4:	080047e1 	.word	0x080047e1
 80047c8:	080047e9 	.word	0x080047e9
 80047cc:	080047f1 	.word	0x080047f1
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	08004801 	.word	0x08004801
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047de:	e086      	b.n	80048ee <UART_SetConfig+0x5a2>
 80047e0:	2304      	movs	r3, #4
 80047e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047e6:	e082      	b.n	80048ee <UART_SetConfig+0x5a2>
 80047e8:	2308      	movs	r3, #8
 80047ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047ee:	e07e      	b.n	80048ee <UART_SetConfig+0x5a2>
 80047f0:	2310      	movs	r3, #16
 80047f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047f6:	e07a      	b.n	80048ee <UART_SetConfig+0x5a2>
 80047f8:	2320      	movs	r3, #32
 80047fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80047fe:	e076      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004800:	2340      	movs	r3, #64	; 0x40
 8004802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004806:	e072      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800480e:	e06e      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a76      	ldr	r2, [pc, #472]	; (80049f0 <UART_SetConfig+0x6a4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d130      	bne.n	800487c <UART_SetConfig+0x530>
 800481a:	4b73      	ldr	r3, [pc, #460]	; (80049e8 <UART_SetConfig+0x69c>)
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	2b05      	cmp	r3, #5
 8004824:	d826      	bhi.n	8004874 <UART_SetConfig+0x528>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <UART_SetConfig+0x4e0>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	08004845 	.word	0x08004845
 8004830:	0800484d 	.word	0x0800484d
 8004834:	08004855 	.word	0x08004855
 8004838:	0800485d 	.word	0x0800485d
 800483c:	08004865 	.word	0x08004865
 8004840:	0800486d 	.word	0x0800486d
 8004844:	2300      	movs	r3, #0
 8004846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800484a:	e050      	b.n	80048ee <UART_SetConfig+0x5a2>
 800484c:	2304      	movs	r3, #4
 800484e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004852:	e04c      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004854:	2308      	movs	r3, #8
 8004856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800485a:	e048      	b.n	80048ee <UART_SetConfig+0x5a2>
 800485c:	2310      	movs	r3, #16
 800485e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004862:	e044      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004864:	2320      	movs	r3, #32
 8004866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800486a:	e040      	b.n	80048ee <UART_SetConfig+0x5a2>
 800486c:	2340      	movs	r3, #64	; 0x40
 800486e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004872:	e03c      	b.n	80048ee <UART_SetConfig+0x5a2>
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800487a:	e038      	b.n	80048ee <UART_SetConfig+0x5a2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a5c      	ldr	r2, [pc, #368]	; (80049f4 <UART_SetConfig+0x6a8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d130      	bne.n	80048e8 <UART_SetConfig+0x59c>
 8004886:	4b58      	ldr	r3, [pc, #352]	; (80049e8 <UART_SetConfig+0x69c>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	2b05      	cmp	r3, #5
 8004890:	d826      	bhi.n	80048e0 <UART_SetConfig+0x594>
 8004892:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <UART_SetConfig+0x54c>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048b1 	.word	0x080048b1
 800489c:	080048b9 	.word	0x080048b9
 80048a0:	080048c1 	.word	0x080048c1
 80048a4:	080048c9 	.word	0x080048c9
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	2302      	movs	r3, #2
 80048b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048b6:	e01a      	b.n	80048ee <UART_SetConfig+0x5a2>
 80048b8:	2304      	movs	r3, #4
 80048ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048be:	e016      	b.n	80048ee <UART_SetConfig+0x5a2>
 80048c0:	2308      	movs	r3, #8
 80048c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048c6:	e012      	b.n	80048ee <UART_SetConfig+0x5a2>
 80048c8:	2310      	movs	r3, #16
 80048ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ce:	e00e      	b.n	80048ee <UART_SetConfig+0x5a2>
 80048d0:	2320      	movs	r3, #32
 80048d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048d6:	e00a      	b.n	80048ee <UART_SetConfig+0x5a2>
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048de:	e006      	b.n	80048ee <UART_SetConfig+0x5a2>
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048e6:	e002      	b.n	80048ee <UART_SetConfig+0x5a2>
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a40      	ldr	r2, [pc, #256]	; (80049f4 <UART_SetConfig+0x6a8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	f040 80ef 	bne.w	8004ad8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048fe:	2b20      	cmp	r3, #32
 8004900:	dc46      	bgt.n	8004990 <UART_SetConfig+0x644>
 8004902:	2b02      	cmp	r3, #2
 8004904:	f2c0 8081 	blt.w	8004a0a <UART_SetConfig+0x6be>
 8004908:	3b02      	subs	r3, #2
 800490a:	2b1e      	cmp	r3, #30
 800490c:	d87d      	bhi.n	8004a0a <UART_SetConfig+0x6be>
 800490e:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <UART_SetConfig+0x5c8>)
 8004910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004914:	08004997 	.word	0x08004997
 8004918:	08004a0b 	.word	0x08004a0b
 800491c:	0800499f 	.word	0x0800499f
 8004920:	08004a0b 	.word	0x08004a0b
 8004924:	08004a0b 	.word	0x08004a0b
 8004928:	08004a0b 	.word	0x08004a0b
 800492c:	080049af 	.word	0x080049af
 8004930:	08004a0b 	.word	0x08004a0b
 8004934:	08004a0b 	.word	0x08004a0b
 8004938:	08004a0b 	.word	0x08004a0b
 800493c:	08004a0b 	.word	0x08004a0b
 8004940:	08004a0b 	.word	0x08004a0b
 8004944:	08004a0b 	.word	0x08004a0b
 8004948:	08004a0b 	.word	0x08004a0b
 800494c:	080049bf 	.word	0x080049bf
 8004950:	08004a0b 	.word	0x08004a0b
 8004954:	08004a0b 	.word	0x08004a0b
 8004958:	08004a0b 	.word	0x08004a0b
 800495c:	08004a0b 	.word	0x08004a0b
 8004960:	08004a0b 	.word	0x08004a0b
 8004964:	08004a0b 	.word	0x08004a0b
 8004968:	08004a0b 	.word	0x08004a0b
 800496c:	08004a0b 	.word	0x08004a0b
 8004970:	08004a0b 	.word	0x08004a0b
 8004974:	08004a0b 	.word	0x08004a0b
 8004978:	08004a0b 	.word	0x08004a0b
 800497c:	08004a0b 	.word	0x08004a0b
 8004980:	08004a0b 	.word	0x08004a0b
 8004984:	08004a0b 	.word	0x08004a0b
 8004988:	08004a0b 	.word	0x08004a0b
 800498c:	080049fd 	.word	0x080049fd
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d036      	beq.n	8004a02 <UART_SetConfig+0x6b6>
 8004994:	e039      	b.n	8004a0a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004996:	f7fe fe99 	bl	80036cc <HAL_RCCEx_GetD3PCLK1Freq>
 800499a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800499c:	e03b      	b.n	8004a16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800499e:	f107 0314 	add.w	r3, r7, #20
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe fea8 	bl	80036f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049ac:	e033      	b.n	8004a16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049ae:	f107 0308 	add.w	r3, r7, #8
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe fff4 	bl	80039a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049bc:	e02b      	b.n	8004a16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049be:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <UART_SetConfig+0x69c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049ca:	4b07      	ldr	r3, [pc, #28]	; (80049e8 <UART_SetConfig+0x69c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	08db      	lsrs	r3, r3, #3
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <UART_SetConfig+0x6ac>)
 80049d6:	fa22 f303 	lsr.w	r3, r2, r3
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049dc:	e01b      	b.n	8004a16 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <UART_SetConfig+0x6ac>)
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049e2:	e018      	b.n	8004a16 <UART_SetConfig+0x6ca>
 80049e4:	40011400 	.word	0x40011400
 80049e8:	58024400 	.word	0x58024400
 80049ec:	40007800 	.word	0x40007800
 80049f0:	40007c00 	.word	0x40007c00
 80049f4:	58000c00 	.word	0x58000c00
 80049f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049fc:	4bc4      	ldr	r3, [pc, #784]	; (8004d10 <UART_SetConfig+0x9c4>)
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a00:	e009      	b.n	8004a16 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a08:	e005      	b.n	8004a16 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004a14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 81da 	beq.w	8004dd2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	4abc      	ldr	r2, [pc, #752]	; (8004d14 <UART_SetConfig+0x9c8>)
 8004a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a30:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	4413      	add	r3, r2
 8004a3c:	6a3a      	ldr	r2, [r7, #32]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d305      	bcc.n	8004a4e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a48:	6a3a      	ldr	r2, [r7, #32]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d903      	bls.n	8004a56 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004a54:	e1bd      	b.n	8004dd2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	4aac      	ldr	r2, [pc, #688]	; (8004d14 <UART_SetConfig+0x9c8>)
 8004a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	f7fb fc33 	bl	80002d8 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4610      	mov	r0, r2
 8004a78:	4619      	mov	r1, r3
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	020b      	lsls	r3, r1, #8
 8004a84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a88:	0202      	lsls	r2, r0, #8
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	6849      	ldr	r1, [r1, #4]
 8004a8e:	0849      	lsrs	r1, r1, #1
 8004a90:	4608      	mov	r0, r1
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	1814      	adds	r4, r2, r0
 8004a98:	eb43 0501 	adc.w	r5, r3, r1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7fb fc15 	bl	80002d8 <__aeabi_uldivmod>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004abc:	d308      	bcc.n	8004ad0 <UART_SetConfig+0x784>
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac4:	d204      	bcs.n	8004ad0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	e180      	b.n	8004dd2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004ad6:	e17c      	b.n	8004dd2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae0:	f040 80be 	bne.w	8004c60 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8004ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	dc49      	bgt.n	8004b80 <UART_SetConfig+0x834>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	db7c      	blt.n	8004bea <UART_SetConfig+0x89e>
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d87a      	bhi.n	8004bea <UART_SetConfig+0x89e>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0x7b0>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b87 	.word	0x08004b87
 8004b00:	08004b8f 	.word	0x08004b8f
 8004b04:	08004beb 	.word	0x08004beb
 8004b08:	08004beb 	.word	0x08004beb
 8004b0c:	08004b97 	.word	0x08004b97
 8004b10:	08004beb 	.word	0x08004beb
 8004b14:	08004beb 	.word	0x08004beb
 8004b18:	08004beb 	.word	0x08004beb
 8004b1c:	08004ba7 	.word	0x08004ba7
 8004b20:	08004beb 	.word	0x08004beb
 8004b24:	08004beb 	.word	0x08004beb
 8004b28:	08004beb 	.word	0x08004beb
 8004b2c:	08004beb 	.word	0x08004beb
 8004b30:	08004beb 	.word	0x08004beb
 8004b34:	08004beb 	.word	0x08004beb
 8004b38:	08004beb 	.word	0x08004beb
 8004b3c:	08004bb7 	.word	0x08004bb7
 8004b40:	08004beb 	.word	0x08004beb
 8004b44:	08004beb 	.word	0x08004beb
 8004b48:	08004beb 	.word	0x08004beb
 8004b4c:	08004beb 	.word	0x08004beb
 8004b50:	08004beb 	.word	0x08004beb
 8004b54:	08004beb 	.word	0x08004beb
 8004b58:	08004beb 	.word	0x08004beb
 8004b5c:	08004beb 	.word	0x08004beb
 8004b60:	08004beb 	.word	0x08004beb
 8004b64:	08004beb 	.word	0x08004beb
 8004b68:	08004beb 	.word	0x08004beb
 8004b6c:	08004beb 	.word	0x08004beb
 8004b70:	08004beb 	.word	0x08004beb
 8004b74:	08004beb 	.word	0x08004beb
 8004b78:	08004beb 	.word	0x08004beb
 8004b7c:	08004bdd 	.word	0x08004bdd
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d02e      	beq.n	8004be2 <UART_SetConfig+0x896>
 8004b84:	e031      	b.n	8004bea <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7fd fe35 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 8004b8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004b8c:	e033      	b.n	8004bf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b8e:	f7fd fe47 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8004b92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004b94:	e02f      	b.n	8004bf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b96:	f107 0314 	add.w	r3, r7, #20
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe fdac 	bl	80036f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ba4:	e027      	b.n	8004bf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ba6:	f107 0308 	add.w	r3, r7, #8
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fe fef8 	bl	80039a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bb4:	e01f      	b.n	8004bf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bb6:	4b58      	ldr	r3, [pc, #352]	; (8004d18 <UART_SetConfig+0x9cc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004bc2:	4b55      	ldr	r3, [pc, #340]	; (8004d18 <UART_SetConfig+0x9cc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	08db      	lsrs	r3, r3, #3
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	4a53      	ldr	r2, [pc, #332]	; (8004d1c <UART_SetConfig+0x9d0>)
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bd4:	e00f      	b.n	8004bf6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8004bd6:	4b51      	ldr	r3, [pc, #324]	; (8004d1c <UART_SetConfig+0x9d0>)
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bda:	e00c      	b.n	8004bf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bdc:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <UART_SetConfig+0x9c4>)
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004be0:	e009      	b.n	8004bf6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004be8:	e005      	b.n	8004bf6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004bf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80ea 	beq.w	8004dd2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	4a44      	ldr	r2, [pc, #272]	; (8004d14 <UART_SetConfig+0x9c8>)
 8004c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c10:	005a      	lsls	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	441a      	add	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	d916      	bls.n	8004c58 <UART_SetConfig+0x90c>
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c30:	d212      	bcs.n	8004c58 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f023 030f 	bic.w	r3, r3, #15
 8004c3a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004c54:	60da      	str	r2, [r3, #12]
 8004c56:	e0bc      	b.n	8004dd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004c5e:	e0b8      	b.n	8004dd2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	dc4b      	bgt.n	8004d00 <UART_SetConfig+0x9b4>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f2c0 8087 	blt.w	8004d7c <UART_SetConfig+0xa30>
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	f200 8084 	bhi.w	8004d7c <UART_SetConfig+0xa30>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <UART_SetConfig+0x930>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004d07 	.word	0x08004d07
 8004c80:	08004d21 	.word	0x08004d21
 8004c84:	08004d7d 	.word	0x08004d7d
 8004c88:	08004d7d 	.word	0x08004d7d
 8004c8c:	08004d29 	.word	0x08004d29
 8004c90:	08004d7d 	.word	0x08004d7d
 8004c94:	08004d7d 	.word	0x08004d7d
 8004c98:	08004d7d 	.word	0x08004d7d
 8004c9c:	08004d39 	.word	0x08004d39
 8004ca0:	08004d7d 	.word	0x08004d7d
 8004ca4:	08004d7d 	.word	0x08004d7d
 8004ca8:	08004d7d 	.word	0x08004d7d
 8004cac:	08004d7d 	.word	0x08004d7d
 8004cb0:	08004d7d 	.word	0x08004d7d
 8004cb4:	08004d7d 	.word	0x08004d7d
 8004cb8:	08004d7d 	.word	0x08004d7d
 8004cbc:	08004d49 	.word	0x08004d49
 8004cc0:	08004d7d 	.word	0x08004d7d
 8004cc4:	08004d7d 	.word	0x08004d7d
 8004cc8:	08004d7d 	.word	0x08004d7d
 8004ccc:	08004d7d 	.word	0x08004d7d
 8004cd0:	08004d7d 	.word	0x08004d7d
 8004cd4:	08004d7d 	.word	0x08004d7d
 8004cd8:	08004d7d 	.word	0x08004d7d
 8004cdc:	08004d7d 	.word	0x08004d7d
 8004ce0:	08004d7d 	.word	0x08004d7d
 8004ce4:	08004d7d 	.word	0x08004d7d
 8004ce8:	08004d7d 	.word	0x08004d7d
 8004cec:	08004d7d 	.word	0x08004d7d
 8004cf0:	08004d7d 	.word	0x08004d7d
 8004cf4:	08004d7d 	.word	0x08004d7d
 8004cf8:	08004d7d 	.word	0x08004d7d
 8004cfc:	08004d6f 	.word	0x08004d6f
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d037      	beq.n	8004d74 <UART_SetConfig+0xa28>
 8004d04:	e03a      	b.n	8004d7c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d06:	f7fd fd75 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 8004d0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004d0c:	e03c      	b.n	8004d88 <UART_SetConfig+0xa3c>
 8004d0e:	bf00      	nop
 8004d10:	003d0900 	.word	0x003d0900
 8004d14:	08005a04 	.word	0x08005a04
 8004d18:	58024400 	.word	0x58024400
 8004d1c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d20:	f7fd fd7e 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8004d24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004d26:	e02f      	b.n	8004d88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d28:	f107 0314 	add.w	r3, r7, #20
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe fce3 	bl	80036f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d36:	e027      	b.n	8004d88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d38:	f107 0308 	add.w	r3, r7, #8
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fe2f 	bl	80039a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d46:	e01f      	b.n	8004d88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d48:	4b2c      	ldr	r3, [pc, #176]	; (8004dfc <UART_SetConfig+0xab0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d54:	4b29      	ldr	r3, [pc, #164]	; (8004dfc <UART_SetConfig+0xab0>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	08db      	lsrs	r3, r3, #3
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	4a28      	ldr	r2, [pc, #160]	; (8004e00 <UART_SetConfig+0xab4>)
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d66:	e00f      	b.n	8004d88 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8004d68:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <UART_SetConfig+0xab4>)
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d6c:	e00c      	b.n	8004d88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d6e:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <UART_SetConfig+0xab8>)
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d72:	e009      	b.n	8004d88 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d7a:	e005      	b.n	8004d88 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004d86:	bf00      	nop
    }

    if (pclk != 0U)
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d021      	beq.n	8004dd2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <UART_SetConfig+0xabc>)
 8004d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	441a      	add	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	2b0f      	cmp	r3, #15
 8004db6:	d909      	bls.n	8004dcc <UART_SetConfig+0xa80>
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbe:	d205      	bcs.n	8004dcc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	e002      	b.n	8004dd2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004dee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3738      	adds	r7, #56	; 0x38
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	03d09000 	.word	0x03d09000
 8004e04:	003d0900 	.word	0x003d0900
 8004e08:	08005a04 	.word	0x08005a04

08004e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	f003 0310 	and.w	r3, r3, #16
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01a      	beq.n	8004f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0a:	d10a      	bne.n	8004f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]
  }
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f60:	f7fc f840 	bl	8000fe4 <HAL_GetTick>
 8004f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d10e      	bne.n	8004f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f82f 	bl	8004fe6 <UART_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e025      	b.n	8004fde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d10e      	bne.n	8004fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f819 	bl	8004fe6 <UART_WaitOnFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e00f      	b.n	8004fde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b09c      	sub	sp, #112	; 0x70
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff6:	e0a9      	b.n	800514c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ffe:	f000 80a5 	beq.w	800514c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fb ffef 	bl	8000fe4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <UART_WaitOnFlagUntilTimeout+0x32>
 8005012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005014:	2b00      	cmp	r3, #0
 8005016:	d140      	bne.n	800509a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800502c:	667b      	str	r3, [r7, #100]	; 0x64
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005038:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800503c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e6      	bne.n	8005018 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3308      	adds	r3, #8
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	663b      	str	r3, [r7, #96]	; 0x60
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3308      	adds	r3, #8
 8005068:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800506a:	64ba      	str	r2, [r7, #72]	; 0x48
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e5      	bne.n	800504a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e069      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d051      	beq.n	800514c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b6:	d149      	bne.n	800514c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
 80050e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e6      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	613b      	str	r3, [r7, #16]
   return(result);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	66bb      	str	r3, [r7, #104]	; 0x68
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005114:	623a      	str	r2, [r7, #32]
 8005116:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	69f9      	ldr	r1, [r7, #28]
 800511a:	6a3a      	ldr	r2, [r7, #32]
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	61bb      	str	r3, [r7, #24]
   return(result);
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e5      	bne.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e010      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69da      	ldr	r2, [r3, #28]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4013      	ands	r3, r2
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	429a      	cmp	r2, r3
 800515a:	bf0c      	ite	eq
 800515c:	2301      	moveq	r3, #1
 800515e:	2300      	movne	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	429a      	cmp	r2, r3
 8005168:	f43f af46 	beq.w	8004ff8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3770      	adds	r7, #112	; 0x70
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_UARTEx_DisableFifoMode+0x16>
 8005188:	2302      	movs	r3, #2
 800518a:	e027      	b.n	80051dc <HAL_UARTEx_DisableFifoMode+0x66>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2224      	movs	r2, #36	; 0x24
 8005198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0201 	bic.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e02d      	b.n	800525c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2224      	movs	r2, #36	; 0x24
 800520c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0201 	bic.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f84f 	bl	80052e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005278:	2302      	movs	r3, #2
 800527a:	e02d      	b.n	80052d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2224      	movs	r2, #36	; 0x24
 8005288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f811 	bl	80052e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d108      	bne.n	8005302 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005300:	e031      	b.n	8005366 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005302:	2310      	movs	r3, #16
 8005304:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005306:	2310      	movs	r3, #16
 8005308:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	0e5b      	lsrs	r3, r3, #25
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	0f5b      	lsrs	r3, r3, #29
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800532a:	7bbb      	ldrb	r3, [r7, #14]
 800532c:	7b3a      	ldrb	r2, [r7, #12]
 800532e:	4911      	ldr	r1, [pc, #68]	; (8005374 <UARTEx_SetNbDataToProcess+0x94>)
 8005330:	5c8a      	ldrb	r2, [r1, r2]
 8005332:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005336:	7b3a      	ldrb	r2, [r7, #12]
 8005338:	490f      	ldr	r1, [pc, #60]	; (8005378 <UARTEx_SetNbDataToProcess+0x98>)
 800533a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800533c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005340:	b29a      	uxth	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	7b7a      	ldrb	r2, [r7, #13]
 800534c:	4909      	ldr	r1, [pc, #36]	; (8005374 <UARTEx_SetNbDataToProcess+0x94>)
 800534e:	5c8a      	ldrb	r2, [r1, r2]
 8005350:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005354:	7b7a      	ldrb	r2, [r7, #13]
 8005356:	4908      	ldr	r1, [pc, #32]	; (8005378 <UARTEx_SetNbDataToProcess+0x98>)
 8005358:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800535a:	fb93 f3f2 	sdiv	r3, r3, r2
 800535e:	b29a      	uxth	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	08005a1c 	.word	0x08005a1c
 8005378:	08005a24 	.word	0x08005a24

0800537c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800537c:	b084      	sub	sp, #16
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	f107 001c 	add.w	r0, r7, #28
 800538a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	2b01      	cmp	r3, #1
 8005392:	d120      	bne.n	80053d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	4b2a      	ldr	r3, [pc, #168]	; (8005450 <USB_CoreInit+0xd4>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d105      	bne.n	80053ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 faa8 	bl	8005920 <USB_CoreReset>
 80053d0:	4603      	mov	r3, r0
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	e01a      	b.n	800540c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa9c 	bl	8005920 <USB_CoreReset>
 80053e8:	4603      	mov	r3, r0
 80053ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
 80053fe:	e005      	b.n	800540c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	2b01      	cmp	r3, #1
 8005410:	d116      	bne.n	8005440 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <USB_CoreInit+0xd8>)
 8005422:	4313      	orrs	r3, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f043 0206 	orr.w	r2, r3, #6
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f043 0220 	orr.w	r2, r3, #32
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800544c:	b004      	add	sp, #16
 800544e:	4770      	bx	lr
 8005450:	ffbdffbf 	.word	0xffbdffbf
 8005454:	03ee0000 	.word	0x03ee0000

08005458 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f023 0201 	bic.w	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d115      	bne.n	80054c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054a8:	2001      	movs	r0, #1
 80054aa:	f7fb fda7 	bl	8000ffc <HAL_Delay>
      ms++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3301      	adds	r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fa25 	bl	8005904 <USB_GetMode>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d01e      	beq.n	80054fe <USB_SetCurrentMode+0x84>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b31      	cmp	r3, #49	; 0x31
 80054c4:	d9f0      	bls.n	80054a8 <USB_SetCurrentMode+0x2e>
 80054c6:	e01a      	b.n	80054fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d115      	bne.n	80054fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054da:	2001      	movs	r0, #1
 80054dc:	f7fb fd8e 	bl	8000ffc <HAL_Delay>
      ms++;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa0c 	bl	8005904 <USB_GetMode>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <USB_SetCurrentMode+0x84>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b31      	cmp	r3, #49	; 0x31
 80054f6:	d9f0      	bls.n	80054da <USB_SetCurrentMode+0x60>
 80054f8:	e001      	b.n	80054fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e005      	b.n	800550a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b32      	cmp	r3, #50	; 0x32
 8005502:	d101      	bne.n	8005508 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005514:	b084      	sub	sp, #16
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e009      	b.n	8005548 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	3340      	adds	r3, #64	; 0x40
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	2200      	movs	r2, #0
 8005540:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3301      	adds	r3, #1
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b0e      	cmp	r3, #14
 800554c:	d9f2      	bls.n	8005534 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800554e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d11c      	bne.n	800558e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005562:	f043 0302 	orr.w	r3, r3, #2
 8005566:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	e005      	b.n	800559a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055a0:	461a      	mov	r2, r3
 80055a2:	2300      	movs	r3, #0
 80055a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ac:	4619      	mov	r1, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b4:	461a      	mov	r2, r3
 80055b6:	680b      	ldr	r3, [r1, #0]
 80055b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d10c      	bne.n	80055da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055c6:	2100      	movs	r1, #0
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f961 	bl	8005890 <USB_SetDevSpeed>
 80055ce:	e008      	b.n	80055e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055d0:	2101      	movs	r1, #1
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f95c 	bl	8005890 <USB_SetDevSpeed>
 80055d8:	e003      	b.n	80055e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055da:	2103      	movs	r1, #3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f957 	bl	8005890 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055e2:	2110      	movs	r1, #16
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f8f3 	bl	80057d0 <USB_FlushTxFifo>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f91d 	bl	8005834 <USB_FlushRxFifo>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	461a      	mov	r2, r3
 800560c:	2300      	movs	r3, #0
 800560e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	461a      	mov	r2, r3
 8005618:	2300      	movs	r3, #0
 800561a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005622:	461a      	mov	r2, r3
 8005624:	2300      	movs	r3, #0
 8005626:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	e043      	b.n	80056b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005644:	d118      	bne.n	8005678 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	461a      	mov	r2, r3
 800565a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	e013      	b.n	800568a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	461a      	mov	r2, r3
 8005670:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e008      	b.n	800568a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005684:	461a      	mov	r2, r3
 8005686:	2300      	movs	r3, #0
 8005688:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005696:	461a      	mov	r2, r3
 8005698:	2300      	movs	r3, #0
 800569a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	461a      	mov	r2, r3
 80056aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	3301      	adds	r3, #1
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d3b7      	bcc.n	800562e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	e043      	b.n	800574c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056da:	d118      	bne.n	800570e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10a      	bne.n	80056f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	461a      	mov	r2, r3
 80056f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	e013      	b.n	8005720 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	461a      	mov	r2, r3
 8005706:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	e008      	b.n	8005720 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	461a      	mov	r2, r3
 800571c:	2300      	movs	r3, #0
 800571e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	461a      	mov	r2, r3
 800572e:	2300      	movs	r3, #0
 8005730:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	461a      	mov	r2, r3
 8005740:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005744:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	3301      	adds	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	429a      	cmp	r2, r3
 8005752:	d3b7      	bcc.n	80056c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005766:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005774:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f043 0210 	orr.w	r2, r3, #16
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <USB_DevInit+0x2b4>)
 800578e:	4313      	orrs	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d005      	beq.n	80057a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f043 0208 	orr.w	r2, r3, #8
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d105      	bne.n	80057b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699a      	ldr	r2, [r3, #24]
 80057b0:	4b06      	ldr	r3, [pc, #24]	; (80057cc <USB_DevInit+0x2b8>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057c4:	b004      	add	sp, #16
 80057c6:	4770      	bx	lr
 80057c8:	803c3800 	.word	0x803c3800
 80057cc:	40000004 	.word	0x40000004

080057d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	4a12      	ldr	r2, [pc, #72]	; (8005830 <USB_FlushTxFifo+0x60>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d901      	bls.n	80057ee <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e01a      	b.n	8005824 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	daf3      	bge.n	80057de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	019b      	lsls	r3, r3, #6
 80057fe:	f043 0220 	orr.w	r2, r3, #32
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3301      	adds	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	4a08      	ldr	r2, [pc, #32]	; (8005830 <USB_FlushTxFifo+0x60>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e006      	b.n	8005824 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b20      	cmp	r3, #32
 8005820:	d0f1      	beq.n	8005806 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	00030d40 	.word	0x00030d40

08005834 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3301      	adds	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	4a11      	ldr	r2, [pc, #68]	; (800588c <USB_FlushRxFifo+0x58>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e017      	b.n	8005880 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	daf3      	bge.n	8005840 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2210      	movs	r2, #16
 8005860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3301      	adds	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	4a08      	ldr	r2, [pc, #32]	; (800588c <USB_FlushRxFifo+0x58>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d901      	bls.n	8005872 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e006      	b.n	8005880 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0310 	and.w	r3, r3, #16
 800587a:	2b10      	cmp	r3, #16
 800587c:	d0f1      	beq.n	8005862 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	00030d40 	.word	0x00030d40

08005890 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b0:	4313      	orrs	r3, r2
 80058b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058dc:	f023 0303 	bic.w	r3, r3, #3
 80058e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f0:	f043 0302 	orr.w	r3, r3, #2
 80058f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f003 0301 	and.w	r3, r3, #1
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <USB_CoreReset+0x60>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e01a      	b.n	8005972 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	daf3      	bge.n	800592c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f043 0201 	orr.w	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3301      	adds	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	4a09      	ldr	r2, [pc, #36]	; (8005980 <USB_CoreReset+0x60>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d0f1      	beq.n	8005954 <USB_CoreReset+0x34>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	00030d40 	.word	0x00030d40

08005984 <__libc_init_array>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4d0d      	ldr	r5, [pc, #52]	; (80059bc <__libc_init_array+0x38>)
 8005988:	4c0d      	ldr	r4, [pc, #52]	; (80059c0 <__libc_init_array+0x3c>)
 800598a:	1b64      	subs	r4, r4, r5
 800598c:	10a4      	asrs	r4, r4, #2
 800598e:	2600      	movs	r6, #0
 8005990:	42a6      	cmp	r6, r4
 8005992:	d109      	bne.n	80059a8 <__libc_init_array+0x24>
 8005994:	4d0b      	ldr	r5, [pc, #44]	; (80059c4 <__libc_init_array+0x40>)
 8005996:	4c0c      	ldr	r4, [pc, #48]	; (80059c8 <__libc_init_array+0x44>)
 8005998:	f000 f820 	bl	80059dc <_init>
 800599c:	1b64      	subs	r4, r4, r5
 800599e:	10a4      	asrs	r4, r4, #2
 80059a0:	2600      	movs	r6, #0
 80059a2:	42a6      	cmp	r6, r4
 80059a4:	d105      	bne.n	80059b2 <__libc_init_array+0x2e>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ac:	4798      	blx	r3
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7ee      	b.n	8005990 <__libc_init_array+0xc>
 80059b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b6:	4798      	blx	r3
 80059b8:	3601      	adds	r6, #1
 80059ba:	e7f2      	b.n	80059a2 <__libc_init_array+0x1e>
 80059bc:	08005a34 	.word	0x08005a34
 80059c0:	08005a34 	.word	0x08005a34
 80059c4:	08005a34 	.word	0x08005a34
 80059c8:	08005a38 	.word	0x08005a38

080059cc <memset>:
 80059cc:	4402      	add	r2, r0
 80059ce:	4603      	mov	r3, r0
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d100      	bne.n	80059d6 <memset+0xa>
 80059d4:	4770      	bx	lr
 80059d6:	f803 1b01 	strb.w	r1, [r3], #1
 80059da:	e7f9      	b.n	80059d0 <memset+0x4>

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
